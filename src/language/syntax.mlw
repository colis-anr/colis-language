
module Variable
  type variable
  val function variable_eq (v1 v2:variable): bool
end

module Syntax
  use mystring.String
  use list.List

  use export Variable

  (* Indicates if a string in a list expression should be split (on spaces)? *)
  type split = Split bool

  (** A `string_expression` evaluates to a `string` *)
  type string_expression =
    | ELiteral string                             (** 'string' *)
    | EVariable variable                          (** ${variable} *)
    | ESubshell instruction                         (** $(instruction) *)
    | EConcat string_expression string_expression (** expression expression (without the space) *)
    (* TODO Arguments $<n> *)

  (** A list_expression` evaluates to a `list string` *)
  with list_expression =
    list (string_expression, split)

  (* Allow $? only as return code, cf. NOTES[Exit] *)
  with return_code =
    | CSuccess
    | CFailure
    | CPrevious

  (** TODO add utilities `true`, `false` to *Specification of UNIX commands*  *)
  with instruction =
    | SAssignment variable string_expression
    | SSequence instruction instruction
    | SSubshell instruction
    | SIf instruction instruction instruction
    | SNot instruction (* NOTES[Conditionals] *)
    | SPipe instruction instruction
    | SWhile instruction instruction
    | SNoOutput instruction
    | SForeach variable list_expression instruction
    | SCall string list_expression
    | SExit return_code (* NOTES[Exit] *)
end
