
module Variable
  type variable
  val function variable_eq (v1 v2:variable): bool
end

module Syntax
  use mystring.String
  use list.List

  use export Variable

  (* Indicates if a string in a list expression should be split (on spaces)? *)
  type split = Split | DontSplit

  (** A `string_expression` evaluates to a `string` *)
  type string_expression =
    | SLiteral string                             (** 'string' *)
    | SVariable variable                          (** ${variable} *)
    | SSubshell instruction                         (** $(instruction) *)
    | SConcat string_expression string_expression (** expression expression (without the space) *)
    (* TODO Arguments $<n> *)

  (** A list_expression` evaluates to a `list string` *)
  with list_expression =
    list (string_expression, split)

  (* Allow $? only as return code, cf. NOTES[Exit] *)
  with return_code =
    | RSuccess
    | RFailure
    | RPrevious

  (** TODO add utilities `true`, `false` to *Specification of UNIX commands*  *)
  with instruction =
    | IAssignment variable string_expression
    | ISequence instruction instruction
    | ISubshell instruction
    | IIf instruction instruction instruction
    | INot instruction (* NOTES[Conditionals] *)
    | IPipe instruction instruction
    | IWhile instruction instruction
    | INoOutput instruction
    | IForeach variable list_expression instruction
    | ICall string list_expression
    | IExit return_code (* NOTES[Exit] *)

  type program = instruction
end
