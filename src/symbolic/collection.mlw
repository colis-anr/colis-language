module Collection

  use list.ListRich as L
  use set.Fset as S

  type t 'a

  (** Membership is all we have to characterize a collection *)
  val predicate mem (x: 'a) (c: t 'a)

  predicate (==) (s1 s2: t 'a) =
    forall x: 'a. mem x s1 <-> mem x s2

  (* Can it be a lemma? Would require propositional extensionality? *)
  axiom extensionality: forall s1 s2: t 'a. s1 == s2 -> s1 = s2

  val function of_list (l: L.list 'a) : t 'a
    ensures { forall x. L.mem x l <-> mem x result }

  val function to_list (c: t 'a) : L.list 'a
    ensures { forall x. mem x c <-> L.mem x result }

  val constant empty : t 'a
    ensures { forall x. not mem x result }

  val function add (x: 'a) (c: t 'a) : t 'a
    ensures { mem x result }
    ensures { forall y. mem y c -> mem y result }
    ensures { forall y. mem y result -> x = y \/ mem y c }

  val function singleton (x: 'a) : t 'a
    ensures { mem x result }
    ensures { forall y. mem y result -> y = x }

  val function map (f: 'a -> 'b) (c: t 'a) : t 'b
    ensures { forall x. mem x c -> mem (f x) result }
    ensures { forall y. mem y result -> exists x. mem x c /\ y = f x }

  val function filter (p: 'a -> bool) (c: t 'a) : t 'a
    ensures { forall x. mem x c -> p x -> mem x result }
    ensures { forall x. not p x -> not mem x result }
    ensures { forall x. mem x result -> p x /\ mem x c }

  val function partition (p: 'a -> bool) (c: t 'a) : (pos: t 'a, neg: t 'a)
    ensures { forall x. mem x c -> mem x pos \/ mem x neg }
    ensures { forall x. mem x pos -> p x /\ mem x c }
    ensures { forall x. mem x neg -> not p x /\ mem x c }

  val function union (c1 c2: t 'a) : t 'a
    ensures { forall x. mem x c1 -> mem x result }
    ensures { forall x. mem x c2 -> mem x result }
    ensures { forall x. mem x result -> mem x c1 \/ mem x c2 }

  lemma union_empty_left: forall c: t 'a.
    union empty c = c

  lemma union_empty_right: forall c: t 'a.
    union c empty = c

  val function bind (f: 'a -> t 'b) (c: t 'a) : t 'b
    ensures { forall x. mem x c -> forall y. mem y (f x) -> mem y result }
    ensures { forall y. mem y result -> exists x. mem x c /\ mem y (f x) }
end