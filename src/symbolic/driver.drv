module symbolicInterpreter.Constraints
  syntax type clause "Constraints.Clause.sat_conj"
  syntax type variable "Constraints.Var.t"
  syntax type feature "Constraints.Feat.t"
  syntax type path "Constraints.Path.t"
end

module symbolicInterpreter.Semantics
  syntax val filter_var_env "Env.filter_var_env (fun v -> v.SymbolicInterpreter__Semantics.exported) (fun v -> v.SymbolicInterpreter__Semantics.value) %1"
  syntax val interp_utility "assert false"
end

module symbolicInterpreter.Interpreter
  syntax val sym_interp_utility "SymbolicUtility.dispatch' %1 %2 %3"
end