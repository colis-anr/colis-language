module symbolicInterpreter.Constraints
  syntax type clause "Constraints.Clause.sat_conj"
  syntax type variable "Constraints.Var.t"
  syntax type feature "Constraints.Feat.t"
  syntax type path "Constraints.Path.t"
end

module symbolicInterpreter.Semantics
  syntax function filter_var_env "Env.filter_var_env (fun v -> v.SymbolicInterpreter__Semantics.exported) (fun v -> v.SymbolicInterpreter__Semantics.value) %1"
  syntax val interp_utility "assert false"
end

module symbolicInterpreter.Interpreter
  syntax val sym_interp_utility "SymbolicUtility.dispatch' %1 %2 %3 %4 %5"
end

module collection.Collection
  syntax type t "%1 list"
  syntax val mem "List.mem %1 %2"
  syntax val empty "[]"
  syntax val add "%1 :: %2"
  syntax val singleton "[%1]"
  syntax val map "List.map %1 %2"
  syntax val filter "List.filter %1 %2"
  syntax val partition "List.partition %1 %2"
  syntax val union "List.rev_append %1 %2"
  syntax val bind "List.concat (List.map %1 %2)"
end