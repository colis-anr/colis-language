module symbolicInterpreter.Constraints
  syntax type clause "Constraints.Clause.sat_conj"
  syntax type variable "Constraints.Var.t"
  syntax type feature "Constraints.Feat.t"
  syntax type path "Constraints.Path.t"
end

module symbolicInterpreter.Semantics
  syntax val filter_var_env "Env.filter_var_env (fun v -> v.SymbolicInterpreter__Semantics.exported) (fun v -> v.SymbolicInterpreter__Semantics.value) %1"
  syntax val interp_utility "assert false"
end

module symbolicInterpreter.Interpreter
  syntax val sym_interp_utility "SymbolicUtility.dispatch' %1 %2 %3"
end

module collection.Collection
  syntax type t "%1 Collection.t"
  syntax val empty "Collection.empty"
  syntax val add "Collection.add %1 %2"
  syntax val map "Collection.map %1 %2"
  syntax val filter "Collection.filter %1 %2"
  syntax val partition "Collection.partition %1 %2"
  syntax val union "Collection.union %1 %2"
  syntax val bind "Collection.bind %1 %2"
  syntax val of_list "Collection.of_list %1"
  syntax val to_list "Collection.to_list %1"
  syntax val size "Collection.size %1"
end