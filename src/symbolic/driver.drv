module symbolicInterpreter.Constraints
  syntax type clause "Colis_constraints.Clause.sat_conj"
  syntax type variable "Colis_constraints.Var.t"
  syntax type feature "Colis_constraints.Feat.t"
  syntax type path "Colis_constraints.Path.t"
end

module symbolicInterpreter.Semantics
  syntax val filter_var_env "Env.filter_var_env (fun v -> v.SymbolicInterpreter__Semantics.exported) (fun v -> v.SymbolicInterpreter__Semantics.value) %1"
  syntax val interp_utility "assert false"
  syntax val absolute_or_concat_relative "Colis_constraints.Path.(normalize ~cwd:%1 (from_string %2))"
  syntax val normalized_path_to_string "Colis_constraints.Path.normal_to_string %1"
  syntax val identifier_test "\"test\""
  syntax val string_dash_d "\"-d\""
  syntax val identifier_pwd "\"PWD\""
end

module symbolicInterpreter.Interpreter
  syntax val sym_interp_utility "BatSet.to_list (SymbolicUtility.dispatch' %1 %2 %3)"
end

module collection.Collection
  syntax type t "%1 list"
  syntax val mem "List.mem %1 %2"
  syntax val empty "[]"
  syntax val add "%1 :: %2"
  syntax val singleton "[%1]"
  syntax val map "List.map %1 %2"
  syntax val filter "List.filter %1 %2"
  syntax val partition "List.partition %1 %2"
  syntax val union "List.rev_append %1 %2"
  syntax val bind "List.concat (List.map %1 %2)"
  syntax val of_list "%1"
  syntax val to_list "%1"
  syntax val size "List.length %1"
end
