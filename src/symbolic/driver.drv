module symbolicInterpreter.Constraints
  syntax type clause "Colis_constraints.Clause.sat_conj"
  syntax type variable "Colis_constraints.Var.t"
  syntax type feature "Colis_constraints.Feat.t"
  syntax type path "Colis_constraints.Path.t"
end

module symbolicInterpreter.Interpreter
  syntax val sym_interp_utility "BatSet.to_list (SymbolicUtility.dispatch' %1)"
end

module collection.Collection
  syntax type t "%1 list"
  syntax val mem "List.mem %1 %2"
  syntax val empty "[]"
  syntax val add "%1 :: %2"
  syntax val singleton "[%1]"
  syntax val map "List.map %1 %2"
  syntax val filter "List.filter %1 %2"
  syntax val partition "List.partition %1 %2"
  syntax val union "List.rev_append %1 %2"
  syntax val bind "List.concat (List.map %1 %2)"
  syntax val of_list "%1"
  syntax val to_list "%1"
  syntax val size "List.length %1"
end
