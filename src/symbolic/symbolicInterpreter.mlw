(* NOTE: Due to bug #257, Why3 exports a higher-order call `f g` to f (g ())` -- as a
   workaround, such calls are written as `f (fun x -> g x)` below. *)

module Constraints

  type variable
  (** abstract type for variables denoting nodes in the file system *)

  type feature
  (** abstract type for filenames (excluding "." and ".."), named
      "feature" in the tree constraint vocabulary *)

  type clause
  (** abstract type for tree constraints, [IMPORTANT] which are always satisfiable *)

  type path
end

(** A symbolic file system.

   The only symbolic part in this intepreter *)
module Filesystem

  use list.List
  use option.Option
  use Constraints

  (** A symbolic filesystem composed by a variable indicating root, constraints, and the
      current working directory `cwd` as feature path. root₀ may refer to the initial root
      variable. When provided it should not be pruned (“quantified over”) during symbolic
      execution of utilities. *)
  type filesystem = {
    root : variable;
    clause : clause;
    cwd : path;
    root0 : option variable;
  }
end

module State
  use Filesystem
  clone export semantics.AbstractState
    with type filesystem = filesystem 
end

module Env
  use syntax.Syntax
  type t 'value
  val constant empty: t 'value
  val function get (env:t 'value) (id:identifier) (default:'value) : 'value
  val function set (env:t 'value) (id:identifier) (value:'value) : t 'value
  val function functional (env:t 'value) (default:'value) : identifier -> 'value
end

module Context
  use option.Option
  use list.List
  use mystring.String
  use syntax.Syntax
  use Env

  type var_env = Env.t string
  type func_env = Env.t (option instruction)

  type context = {
    var_env: var_env;
    func_env: func_env;
    arguments: list string;
    result: bool; (* previous result ($?) for input state, current result for output state *)
  }

  let constant empty_context = {
    var_env = Env.empty; 
    func_env = Env.empty;
    arguments = Nil;
    result = True;
  }

  use semantics.Context as C

  let function contextx (c:context) : C.context = {
    C.var_env = Env.functional c.var_env String.empty;
    C.func_env = Env.functional c.func_env None;
    C.arguments = c.arguments;
    C.result = c.result;
  }

  let function with_result ret ctx =
    ensures { result.result = ret }
    ensures { result.var_env = ctx.var_env }
    ensures { result.func_env = ctx.func_env }
    ensures { result.arguments = ctx.arguments }
    { ctx with result = ret }
end

module SymState

  use Context
  use State

  type sym_state 'a = {
    context: context;
    state: state;
    data: 'a (* Used to fiddle additional information through interp_instr': A stdin in pipe and the last reuslt in the loops *)
  }

  let function with_data data =
    fun sta ->
      {sta with data = data}
end

(** The symbolic interpretation of a program results describes multiple possible results
  *)
module Results

  use symbolicAuxiliaries.Fset
  use semantics.Input
  use semantics.Behaviour
  use semantics.Semantics
  use Context
  use State
  use SymState

  type t 'a = {
    normal: set (sym_state 'a);
    exit: set (sym_state 'a);
    return_: set (sym_state 'a);
    failure: set (sym_state 'a);
  }

  let constant empty = {
    normal = Fset.empty;
    exit = Fset.empty;
    return_ = Fset.empty;
    failure = Fset.empty;
  }

  let separate_normal res =
    res.normal, {res with normal = Fset.empty}

  let separate_non_failure res =
    union res.normal (union res.exit res.return_), res.failure

  let function all_states res =
    union res.normal (union res.exit (union res.return_ res.failure))

  let function failures (ctx:context) (stas:set state) : t unit =
    let aux sta = {state=sta; context=ctx; data=()} in
    let failure = Fset.map (fun x -> aux x) stas in
    { empty with failure = failure }

  let map f res = {
    normal  = Fset.map f res.normal;
    exit    = Fset.map f res.exit;
    return_ = Fset.map f res.return_;
    failure = Fset.map f res.failure;
  }

  let union res1 res2 = Fset.({
    normal  = union res1.normal  res2.normal;
    exit    = union res1.exit    res2.exit;
    return_ = union res1.return_ res2.return_;
    failure = union res1.failure res2.failure;
  })

  let inject (inp:input) (stas:set (sym_state 'a)) : t 'a
    ensures { all_states result = stas }
    ensures { forall s. mem s result.normal -> behaviour' inp (contextx s.context) = BNormal }
    ensures { forall s. mem s result.exit -> behaviour' inp (contextx s.context) = BExit }
  = let aux bhv = fun sta ->
      match bhv, behaviour' inp (contextx sta.context) with
      | BNormal, BNormal -> True
      | BExit, BExit -> True
      | _ -> False
      end
    in
    {empty with
     normal = Fset.filter (aux BNormal) stas;
     exit = Fset.filter (aux BExit) stas}
end

module Interpreter

  use bool.Bool
  use option.Option
  use int.Int
  use list.List
  use list.Append
  use mystring.String
  use syntax.Syntax
  use auxiliaries.Auxiliaries
  use semantics.Env
  use semantics.Behaviour
  use semantics.Input
  use semantics.Config
  use semantics.Buffers
  use semantics.Arguments
  use semantics.Semantics as Sem
  use symbolicAuxiliaries.Auxiliaries
  use symbolicAuxiliaries.Fset
  use State
  use Context
  use SymState
  use Results as Rs

  (* Implemented in OCaml *)
  val function interp_utility identifier (list string) state : set (state, bool)

  let separate_options (opt_stas: set (state, option 'a))
    : (results: set (state, 'a), failures: set state)
    ensures {
      opt_stas =
        union
          (map (fun arg -> let sta, x = arg in sta, Some x) results)
          (map (fun sta -> sta, None) failures)
    }
  = let rec aux acc1 acc2 opt_stas =
      match opt_stas with
      | Nil -> acc1, acc2
      | Cons (sta, Some x) opt_stas' ->
        aux (add (sta, x) acc1) acc2 opt_stas'
      | Cons (sta, None) opt_stas' ->
        aux acc1 (add sta acc2) opt_stas'
      end
    in
    aux empty empty (Fset.to_list opt_stas)

  let rec interp_instr (cnf:config) (inp:input) (ctx:context) (sta:state) (ins:instruction)
  : Rs.t unit diverges
  = match ins with

    | IAssignment var se ->
      let str_stas, str_stas_failure =
        separate_options
          (interp_str_expr True cnf inp ctx sta se)
      in
      let res =
        let for_str_sta arg =
          let sta', (result, str) = arg in
          let ctx' = {
            ctx with
            var_env = Env.set ctx.var_env var str;
            result = result;
          }
          in
          {state = sta'; context = ctx'; data = ()}
        in
        Rs.inject inp
          (Fset.map (fun x -> for_str_sta x) str_stas)
      in
      let res_failure = Rs.failures ctx str_stas_failure in
      Rs.union res res_failure

    | ISequence ins1 ins2 ->
      let res1_normal, res1_other =
        Rs.separate_normal 
          (interp_instr cnf inp ctx sta ins1)
      in
      let res2 = interp_instr_unit' cnf inp res1_normal ins2 in
      Rs.union res2 res1_other

    | ISubshell ins ->
      let stas, stas_failure =
        Rs.separate_non_failure
          (interp_instr cnf inp ctx sta ins)
      in
      let stas' =
        let aux sta =
          let ctx' = {ctx with result = sta.context.result} in
          {state=sta.state; context=ctx'; data=()}
        in
        map (fun x -> aux x) stas
      in
      Rs.(union (inject inp stas')
            {empty with failure = stas_failure})

    | INot ins ->
      let res = interp_instr cnf {inp with under_condition=True } ctx sta ins in
      let flip_result sta' =
        let res' = notb sta'.context.result in
        let ctx' = {sta'.context with result = res'} in
        {sta' with context = ctx'}
      in
      Rs.({
        normal = Fset.map (fun x -> flip_result x) res.normal;
        return_ = Fset.map (fun x -> flip_result x) res.return_;
        exit = res.exit;
        failure = res.failure;
      })

    | INoOutput ins -> 
      let reset_output sta' =
        let sta'' = {sta'.state with stdout = sta.stdout} in
        {sta' with
         state = sta''}
      in
      Rs.map (fun x -> reset_output x)
        (interp_instr cnf inp ctx sta ins)

    | IIf ins1 ins2 ins3 ->
      let res1 = interp_instr cnf {inp with under_condition=True} ctx sta ins1 in
      let res1_normal, res1_other = Rs.separate_normal res1 in
      let res2 =
        let res1_true, res1_false =
          Fset.partition
            (fun sta -> sta.context.result)
            res1_normal
        in
        Rs.union
          (interp_instr_unit' cnf inp res1_true ins2)
          (interp_instr_unit' cnf inp res1_false ins3)
      in
      Rs.union res2 res1_other

    | ICallUtility id le ->
      let res, res_failures =
        separate_options
          (interp_list_expr cnf inp ctx sta le)
      in
      let res' =
        let call_utility arg =
          let sta', args = arg in
          interp_utility id args sta'
        in
        let for_call_result arg =
          let sta'', b = arg in
          let ctx' = with_result b ctx in
          {state=sta''; context=ctx'; data=()}
        in
        Rs.inject inp
          (map (fun x -> for_call_result x)
             (bind (fun x -> call_utility x) res))
      in
      let res_failures' =
        Rs.failures ctx res_failures
      in
      Rs.union res' res_failures'

    | ICallFunction id le ->
      let arg_res, arg_res_failures =
        separate_options
          (interp_list_expr cnf inp ctx sta le)
      in
      let res =
        match Env.get ctx.func_env id None with
        | None ->
          let sym_state arg =
            let sta', _ = arg in
            let ctx' = with_result False ctx in
            {state = sta'; context = ctx'; data = ()}
          in
          Rs.inject inp (Fset.map (fun x -> sym_state x) arg_res)
        | Some ins ->
          let res2 =
            let rec for_arg_res (res:list (state, list string)) : Rs.t unit =
              match res with
              | Nil -> Rs.empty
              | Cons (sta1, args) res' ->
                let inp1 = {inp with argument0 = identifier_to_string id} in
                let ctx1 = {ctx with arguments = args} in
                Rs.union
                  (interp_instr cnf inp1 ctx1 sta1 ins)
                  (for_arg_res res')
              end
            in
            for_arg_res (Fset.to_list arg_res)
          in
          Rs.({
            res2 with
            normal = union res2.normal res2.return_;
            return_ = Fset.empty;
          })
        end
      in
      let res_failures = Rs.failures ctx arg_res_failures in
      Rs.union res res_failures

    | IShift bn ->
      match shift_arguments (option_get (mk_nat 1) bn).nat ctx.arguments with
      | Some args ->
        let ctx' = {ctx with result = True; arguments = args} in
        let sta' = {state = sta; context = ctx'; data=()} in
        Rs.({empty with normal = Fset.singleton sta'})
      | None ->
        let ctx' = {ctx with result = False} in
        let sta' = {state = sta; context = ctx'; data=()} in
        Rs.inject inp (Fset.singleton sta')
      end

    | IForeach id le ins ->
      let lst_res, lst_res_failures =
        separate_options
          (interp_list_expr cnf inp ctx sta le)
      in
      (* Run interpretation of foreach in one state *)
      let rec interp_foreach (b:bool) (ctx:context) (sta:state) (ss:list string) : Rs.t bool =
        match ss with
        | Nil ->
          let normal = singleton {state = sta; context = ctx; data = b} in
          Rs.({empty with normal = normal})
        | Cons s ss' ->
          let res1_normal, res1_abort =
            let ctx' = {ctx with var_env = Env.set ctx.var_env id s} in
            Rs.separate_normal
              (interp_instr cnf inp ctx' sta ins)
          in
          let rec for_normal (res1_normal:list (sym_state unit)) : Rs.t bool =
            (* TODO Reuse loop_res instead? *)
            match res1_normal with
            | Nil -> Rs.empty
            | Cons sta1 res1_normal' ->
              Rs.union
                (interp_foreach sta1.context.result sta1.context sta1.state ss')
                (for_normal res1_normal')
            end
          in
          let for_abort (sta:sym_state unit) : sym_state bool =
            with_data sta.context.result sta
          in
          Rs.union
            (for_normal (Fset.to_list res1_normal))
            (Rs.map (fun x -> for_abort x) res1_abort)
        end
      in
      (* Run interpretation of foreach loop for every state resulting from interp_list_expr *)
      let rec loop_res (lst_res: list (state, list string)) : Rs.t bool =
        match lst_res with
        | Nil -> Rs.empty
        | Cons (sta', ss) lst_res' ->
          Rs.union
            (interp_foreach True ctx sta' ss)
            (loop_res lst_res')
        end
      in
      (* Move data to result *)
      let set_result sta'' =
        let ctx'' = with_result sta''.data sta''.context in
        with_data () {sta'' with context = ctx'' }
      in
      Rs.(union
           (map (fun x -> set_result x)
             (loop_res (Fset.to_list lst_res)))
           (Rs.failures ctx lst_res_failures))

    | IWhile ins1 ins2 ->
      let rec interp_while ctr (stas: set (sym_state bool)) : Rs.t unit =
        if ctr = 0 then
          Rs.(map (with_data ())
                {empty with failure = stas})
        else
          let res1_normal, res1_abort =
            Rs.separate_normal
              (interp_instr_bool' cnf {inp with under_condition=True} stas ins1)
          in
          let res1_true, res1_false =
            Fset.partition (fun sta -> sta.context.result) res1_normal
          in
          let res2_normal, res2_abort =
            Rs.separate_normal
              (interp_instr_bool' cnf inp res1_true ins2)
          in
          let res3 = interp_while (ctr-1) res2_normal in
          let others =
            let res1_false' = Rs.({empty with normal=res1_false}) in
            Rs.(map (with_data ())
                 (union res2_abort
                  (union res1_abort res1_false')))
          in
          Rs.union res3 others
      in
      interp_while cnf.loop_boundary
        (Fset.singleton ({state=sta; context=ctx; data=True}))

    | IPipe ins1 ins2 ->
      let stas1, stas1_failure =
        let sta' = {sta with stdout = Stdout.empty} in
        Rs.separate_non_failure
          (interp_instr cnf inp ctx sta' ins1)
      in
      let res2 =
        let stas1' =
          let set_stdin_stdout sta1 =
            let sta' = {
              sta1.state with
              stdout = sta.stdout;
              stdin = Stdout.to_stdin sta1.state.stdout
            } in
            {state=sta'; context=ctx; data=sta1.state.stdin}
          in
          Fset.map (fun x -> set_stdin_stdout x) stas1
        in
        interp_instr_stdin' cnf inp stas1' ins2
      in
      let revise sta2 =
        let sta2' = {sta2.state with stdin = sta2.data} in
        let ctx' = {ctx with result = sta2.context.result} in
        {state = sta2'; context = ctx'; data=()}
      in
      Rs.(union
            (map (fun x -> revise x) res2)
            {empty with failure = stas1_failure})

    | IExit code ->
      let r =
        match code with
        | RPrevious -> ctx.result
        | RSuccess -> True
        | RFailure -> False
        end
      in
      let sta =
        let ctx' = {ctx with result = r} in
        {state = sta; context = ctx'; data=()}
      in
      Rs.({empty with exit = Fset.singleton sta})

    | IReturn code -> 
      let r =
        match code with
        | RPrevious -> ctx.result
        | RSuccess -> True
        | RFailure -> False
        end
      in
      let sta =
        let ctx' = {ctx with result = r} in
        {state = sta; context = ctx'; data=()}
      in
      Rs.({empty with return_ = Fset.singleton sta})
    end

  (* Monomorphic version of `interp_instr' : input -> set (sym_state 'a) -> Rs.t 'a`
     to work around bug https://gitlab.inria.fr/why3/why3/issues/240 *)

  with interp_instr_unit' (cnf:config) (inp:input) (stas: set (sym_state unit)) (ins:instruction) : Rs.t unit diverges =
    (* Cannot fold `stas` because `interp_instr` may not terminate *)
    let rec aux (stas: list (sym_state unit)) : Rs.t unit =
      match stas with
      | Nil ->
        Rs.empty
      | Cons sta stas' -> 
        let res = interp_instr cnf inp sta.context sta.state ins in
        let res' = Rs.map (with_data sta.data) res in
        Rs.union res' (aux stas')
      end
    in
    aux (Fset.to_list stas)

  with interp_instr_bool' (cnf:config) (inp:input) (stas: set (sym_state bool)) (ins:instruction) : Rs.t bool diverges =
    (* Cannot fold `stas` because `interp_instr` may not terminate *)
    let rec aux (stas: list (sym_state bool)) : Rs.t bool =
      match stas with
      | Nil ->
        Rs.empty
      | Cons sta stas' -> 
        let res = interp_instr cnf inp sta.context sta.state ins in
        let res' = Rs.map (with_data sta.data) res in
        Rs.union res' (aux stas')
      end
    in
    aux (Fset.to_list stas)

  with interp_instr_stdin' (cnf:config) (inp:input) (stas: set (sym_state stdin)) (ins:instruction) : Rs.t stdin diverges =
    (* Cannot fold `stas` because `interp_instr` may not terminate *)
    let rec aux (stas: list (sym_state stdin)) : Rs.t stdin =
      match stas with
      | Nil ->
        Rs.empty
      | Cons sta stas' -> 
        let res = interp_instr cnf inp sta.context sta.state ins in
        let res' = Rs.map (with_data sta.data) res in
        Rs.union res' (aux stas')
      end
    in
    aux (Fset.to_list stas)

  with interp_str_expr (b:bool) (cnf:config) (inp:input) (ctx:context) (sta:state) (se:string_expression)
    : set (state, option (bool, string))
    diverges
  = match se with
    | SLiteral str ->
      singleton (sta, Some (b, str))
    | SVariable var ->
      let str = Env.get ctx.var_env var String.empty in
      singleton (sta, Some (b, str))
    | SArgument n ->
      let str = nth_argument (Cons inp.argument0 ctx.arguments) n.nat in
      singleton (sta, Some (b, str))
    | SSubshell ins ->
      let res, stas_failures =
        let sta' = {sta with stdout=Stdout.empty} in
        Rs.separate_non_failure
          (interp_instr cnf inp ctx sta' ins)
      in
      let for_non_failure (sta1:sym_state unit) =
        let str = Stdout.to_string sta1.state.stdout in
        let sta1' = {sta1.state with stdout=sta.stdout} in
        let b' = sta1.context.result in
        sta1', Some  (b', str)
      in
      Fset.(union
        (map (fun x -> for_non_failure x) res)
        (map (fun sta1 -> sta1.state, None) stas_failures))
    | SConcat se1 se2 ->
      let res1 = interp_str_expr b cnf inp ctx sta se1 in
      let rec for_res1 (res1: list (state, option (bool, string))) : set (state, option (bool, string)) =
        match res1 with
        | Nil ->
          empty
        | Cons (sta1, None) res1' ->
          Fset.add (sta1, None)
            (for_res1 res1')
        | Cons (sta1, Some (b1, str1)) res1' -> 
          let stas = interp_str_expr b1 cnf inp ctx sta1 se2 in
          let concat arg =
            match arg with
            | sta2, None ->
              sta2, None
            | sta2, Some (b2, str2) ->
              sta2, Some (b2, str1^str2)
            end
          in
          Fset.union
            (Fset.map (fun x -> concat x) stas)
            (for_res1 res1')
        end
      in
      for_res1 (Fset.to_list res1)
    end

  with interp_list_expr (cnf:config) (inp:input) (ctx:context) (sta:state) (le:list_expression)
    : set (state, option (list string))
    diverges
  = match le with
    | Nil ->
      singleton (sta, Some Nil)
    | Cons (se, sp) le' ->
      let str_res1, str_res1_failures =
        separate_options
          (interp_str_expr True cnf inp ctx sta se)
      in
      let lst_res1 = (* Non-failure string list results *)
        let aux arg =
          let sta, (_, str) = arg in
          sta, Sem.split sp str
        in
        map (fun x -> aux x) str_res1
      in
      let rec for_lst_res1 (res1: list (state, list string)) : set (state, option (list string)) =
        match res1 with
        | Nil -> empty
        | Cons (sta1, l1) res1' ->
          let lst_res2, lst_res2_failures =
            separate_options
              (interp_list_expr cnf inp ctx sta1 le')
          in
          let lst_res12 =
            let concat arg =
              let sta2, l2 = arg in
              sta2, Some (l1++l2)
            in
            Fset.map (fun x -> concat x) lst_res2
          in
          union lst_res12
            (union
              (map (fun sta -> sta, None) lst_res2_failures)
              (for_lst_res1 res1'))
        end
      in
      union
        (for_lst_res1 (Fset.to_list lst_res1))
        (map (fun sta -> sta, None) str_res1_failures)
    end

  let rec interp_function_definitions (fenv:func_env) (defs:list function_definition)
    variant { defs }
  = match defs with
    | Nil -> fenv
    | Cons (id, instr) defs' ->
      interp_function_definitions (Env.set fenv id (Some instr))  defs'
    end

  let function only_states_with_result (res: bool) (stas: set (sym_state unit)) : set state =
    map (fun sta -> sta.state)
      (filter (fun sta -> notb (xorb res sta.context.result))
        stas)

  let interp_program cnf inp ctx sta pro : (set state, set state, set state) diverges =
    let stas, stas_failure =
      let fenv = interp_function_definitions ctx.func_env pro.function_definitions in
      let ctx' = {ctx with func_env = fenv} in
      Rs.separate_non_failure
        (interp_instr cnf inp ctx' sta pro.instruction)
    in
    (only_states_with_result True stas,
     only_states_with_result False stas,
     Fset.map (fun sta -> sta.state) stas_failure)
end