module Definitions
 
  use list.List
  use set.Fset
  use bool.Bool
  use mystring.String
  use syntax.Syntax
  use semantics.Environment
  use semantics.Buffers

  type feature = F string
  type var = V string

  type constraint =
    | Bottom (* ⊥ *)
    | Eq var var (* x = y *)
    | Feature var feature var (* x[f]y *)
    | Present var feature (* x[f]↓ *)
    | Absent var feature (* x[f]↑ *)
    | Dir var (* dir(x) *)
    | Reg var (* reg(x) *)
    | Fence var (set feature) (* x[F] *)
    | Similar var (set feature) var (* x ~F y *)
    (* | Symlink var (\* symlink(x) *\) *)

  (* A big conjunction, empty = ⊤ *)
  type constraints = set constraint 

  (** A singleton set with Fals is a contradiction *)
  let constant contradiction = singleton Bottom

  (** A normalized path. First element is the target node and last is child of root. Empty
      when target node is root *)
  type path = list (var, feature)

  (** Get the target node of a path [p], or the given root [r] when [p] is empty. *)
  let function path_target (p:path) (r:var) : var =
    match p with
    | Nil -> r
    | Cons (x, _) _ -> x
    end

  (** A symbolic filesystem.

      Implicit invariant: cwd is a consistent with the constraints *)
  type filesystem = {
    root : var;
    cwd : path;
    constraints : constraints;
  }

  (** The symbolic state combines a symbolic filesystem, input/output, and interpreter
      internal state *)
  type state = {
    filesystem : filesystem;
    stdout : stdout;
    stdin : stdin;
    venv: env string;
    result: bool;
  }

  let function empty_state root = {
    filesystem = {root = V root; cwd = Nil; constraints = Fset.empty};
    stdout = empty_stdout;
    stdin = empty_stdin;
    venv = empty_env;
    result = True;
  }

  type states = set state
  let rec states_with_result res stas =
    if Fset.is_empty stas then
      Fset.empty
    else
      let sta = choose stas in
      let stas' = states_with_result res (remove sta stas) in
      if notb (xorb res sta.result)
      then add sta stas'
      else stas'

  (** The symbolic interpretation of a program results describes multiple possible results *)
  type results = {
    normal: states;
    exit: states;
  }

  let constant empty_results = { normal = Fset.empty; exit = Fset.empty }

  let results_union res1 res2 = {
    normal = union res1.normal res2.normal;
    exit = union res1.exit res2.exit;
  }
end

(* Separated into two modules to be able to bind `interp_builtin` from OCaml *)

module Interpreter

  use bool.Bool
  use set.Fset
  use list.List
  use list.Append
  use set.Fset
  use mystring.String
  use syntax.Syntax
  use semantics.Behaviour
  use semantics.Context
  use semantics.Environment
  use Definitions

  (* Constraint propagation, results in [contradiction] if unsatisfiable *)
  val function propagate filesystem : filesystem

  (* Implemented in OCaml *)
  val function interp_builtin state string (list string) : list (bool, state)

  let rec interp_instruction inp sta ins : results diverges =
    let res =
      match ins with
      | IIf t1 t2 t3 ->
        interp_if inp sta t1 t2 t3
      | ISequence t1 t2 ->
        interp_sequence inp sta t1 t2
      | ICall nm le ->
        let args, sta' = interp_list_expression inp sta le in
        let rec aux res =
          match res with
          | Nil -> empty_results
          | Cons (b, sta) res' ->
            let sta = { sta with result = b } in
            let res =
              if andb (strict inp.under_condition) (notb b)
              then { empty_results with exit = singleton sta }
              else { empty_results with normal = singleton sta }
            in
            results_union res (aux res')
          end
        in aux (interp_builtin sta' nm args)
      | IAssignment v se ->
        interp_assignment inp sta v se
      | _ -> absurd
      end
    in
    let rec aux stas = 
      if Fset.is_empty stas then
        Fset.empty
      else
        let sta = choose stas in
        let fs = propagate sta.filesystem in
        let stas' = aux (remove sta stas) in
        if fs.constraints == contradiction then
          stas'
        else
          add { sta with filesystem = fs } stas'
    in {normal = aux res.normal; exit = aux res.exit}

  with interp_instruction' inp stas ins : results diverges =
    if Fset.is_empty stas then
      empty_results
    else
      let sta = choose stas in
      let stas = remove sta stas in
      results_union
        (interp_instruction inp sta ins)
        (interp_instruction' inp stas ins)

  with interp_sequence inp sta ins1 ins2 : results =
    let res1 = interp_instruction inp sta ins1 in
    let res2 = interp_instruction' inp res1.normal ins2 in
    { exit = union res1.exit res2.exit; normal = res2.normal }

  with interp_if inp sta ins1 ins2 ins3 : results =
    let res1 = interp_instruction { inp with under_condition=True } sta ins1 in
    let res2 =
      results_union
        (interp_instruction' inp (states_with_result True res1.normal) ins2)
        (interp_instruction' inp (states_with_result False res1.normal) ins3)
    in
    { exit = union res1.exit res2.exit; normal = res2.normal }

  with interp_assignment inp sta var se =
    let str = interp_string_expression sta se in
    let sta' = { sta with result = True; venv = sta.venv[var <- str] } in
    { empty_results with normal = singleton sta' }

  with interp_string_expression sta se : string diverges =
    match se with
    | SLiteral str -> str
    | SVariable var -> sta.venv var
    | SConcat se1 se2 ->
      let str1 = interp_string_expression sta se1 in
      let str2 = interp_string_expression sta se2 in
      str1^str2
    | SSubshell _ -> absurd
    end

  with interp_list_expression (inp:input) (sta:state) (le:list_expression)
    : (list string, state)
    diverges
  = match le with
    | Nil -> Nil, sta
    | Cons (se, split) le' ->
      let str = interp_string_expression sta se in
      let strs = match split with Split -> String.split_on_default_ifs str | DontSplit -> Cons str Nil end in
      let strs', sta = interp_list_expression inp sta le' in
      strs ++ strs', sta
    end

  let interp_program inp sta pro : results diverges =
    interp_instruction inp sta pro
end
