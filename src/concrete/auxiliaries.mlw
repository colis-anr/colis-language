module Auxiliaries

  use option.Option

  let function option_get default opt =
    match opt with
    | Some x -> x
    | None -> default
    end
end

(** Used for proving the soundness of interpreting IForeach *)
module TakeDrop
  use int.Int
  use list.List
  use list.Append
  use list.Length
  use list.Nth
  use list.NthNoOpt

  function drop (n: int) (l: list 'a) : list 'a =
    if n = 0 then
      l
    else
      match l with
      | Cons _ l' -> drop (n-1) l'
      | Nil -> Nil
      end

  lemma drop0: forall l: list 'a. drop 0 l = l

  lemma drop_all: forall l: list 'a, i.
    i >= length l -> drop i l = Nil

  lemma nth_drop: forall l[@induction]: list 'a, i.
    0 <= i < length l ->
    drop i l = Cons (NthNoOpt.nth i l) (drop (i+1) l)

  function take (n: int) (l: list 'a) : list 'a =
    if n = 0 then
      Nil
    else
      match l with
      | Cons x l' -> Cons x (take (n-1) l')
      | Nil -> Nil
      end

  lemma take_0: forall l: list 'a. take 0 l = Nil

  lemma take_all: forall l[@induction]: list 'a, i.
    i >= length l -> take i l = l

  lemma take_drop: forall l[@induction] : list 'a, i.
    l = take i l ++ drop i l

  lemma take_nth_drop: forall l: list 'a, i.
    0 <= i < length l ->
    l = take i l ++ (Cons (NthNoOpt.nth i l) (drop (i+1) l))

  lemma take_nth: forall l: list 'a, i.
    0 <= i < length l - 1 ->
    take (i+1) l = take i l ++ Cons (NthNoOpt.nth i l) Nil

  use option.Option

  lemma some_nth: forall l[@induction]: list 'a, i.
    0 <= i < length l <->
    Nth.nth i l <> None

  lemma nth_nth: forall l[@induction] i, x:'a.
    Nth.nth i l = Some x -> NthNoOpt.nth i l = x
end