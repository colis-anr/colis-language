(** {1 An imperative interpreter of the CoLiS Language}

    See NOTES[Concrete interpreter type] for discussion on arguments.
 *)

(** The filesystem is no modelled by the concrete interpreter *)
module Filesystem
  type filesystem = unit
  let constant empty : filesystem = ()
end

module Interpreter

  use list.List
  use list.Append
  use list.Length
  use list.Nth
  use ref.Ref
  use option.Option
  use bool.Bool
  use map.MapExt
  use int.Int

  use auxiliaries.Auxiliaries
  use mystring.String
  use syntax.Syntax
  use Filesystem
  use semantics.Buffers
  use semantics.Behaviour
  use semantics.Env
  use semantics.Input
  use semantics.Context as C
  use semantics.State as S
  use semantics.Semantics
  use auxiliaries.TakeDrop

  (** {3 A purely imparative state} *)

  (* We use refs instead of mutable fields to be able to reuse `stdin` (and `stdout`) but
     shadow `senv`. *)
  type state = {
    (* Semantics.state *)
    filesystem : ref filesystem;
    stdin : ref stdin;
    stdout : ref stdout;
    (* Semantics.context *)
    var_env : ref C.var_env;
    func_env : C.func_env;
    arguments: ref (list string);
    result : ref bool;
  }

  let empty_state () = {
    filesystem = ref Filesystem.empty;
    var_env = ref C.empty_var_env;
    func_env = C.empty_func_env;
    arguments = ref Nil;
    stdin = ref Stdin.empty;
    stdout = ref Stdout.empty;
    result = ref True;
  }

  (** {4 Conversion to `semantics.Context`} *)

  let function context (sta:state) : C.context
    ensures {
      result.C.var_env = !(sta.var_env) /\
      result.C.func_env = sta.func_env /\
      result.C.arguments = !(sta.arguments) /\
      result.C.result = !(sta.result)
    }
  = {
    C.var_env = !(sta.var_env);
    C.func_env = sta.func_env;
    C.arguments = !(sta.arguments);
    C.result = !(sta.result);
  }

  lemma context_same: forall sta1 sta2.
    !(sta1.arguments) = !(sta2.arguments) ->
    !(sta1.result) = !(sta2.result) ->
    !(sta1.var_env) == !(sta2.var_env) ->
    sta1.func_env == sta2.func_env ->
    context sta1 = context sta2

  let function state (sta:state) : S.state = {
    S.filesystem = !(sta.filesystem);
    S.stdin = !(sta.stdin);
    S.stdout = !(sta.stdout)
  }

  lemma state_same: forall sta1 sta2.
    !(sta1.filesystem) = !(sta2.filesystem) ->
    !(sta1.stdin) = !(sta2.stdin) ->
    !(sta1.stdout) = !(sta2.stdout) ->
    state sta1 = state sta2

  (** {3 The exit exception} *)

  exception EExit
  exception EReturn

  let maybe_exit (inp:input) (sta:state) : unit
    returns { () ->
      behaviour' inp (context sta) = BNormal
    }
    raises { EExit ->
      behaviour' inp (context sta) = BExit
    }
  = if andb (strict inp.under_condition) (notb !(sta.result)) then
      raise EExit

  (** {3 Imperative wrapper around the functional interpretation of utilties} *)

  let interp_utility (inp:input) (sta:state) (id:identifier) (args:list string)
    returns { () -> 
      interp_utility (old state sta) id args = (state sta, !(sta.result)) /\
      behaviour' inp (context sta) = BNormal
    }
    raises { EExit -> 
      interp_utility (old state sta) id args = (state sta, !(sta.result)) /\
      behaviour' inp (context sta) = BExit
    }
  = let sta', b = interp_utility (state sta) id args in
    sta.filesystem := sta'.S.filesystem;
    sta.stdin := sta'.S.stdin;
    sta.stdout := sta'.S.stdout;
    sta.result := b;
    maybe_exit inp sta

  use semantics.Arguments

  let shift_arguments sta n
    requires { n >= 0 }
    ensures {
      !(sta.result) = True ->
      Some !(sta.arguments) = shift_arguments n !(old sta.arguments)
    }
    ensures {
      !(sta.result) = False ->
      None = shift_arguments n !(old sta.arguments) /\
      !(sta.arguments) = !(old sta.arguments)
    }
  = try
      let args = ref !(sta.arguments) in
      for i = 1 to n do
        invariant { length !(sta.arguments) >= i-1  }
        invariant { shift_arguments (i-1) !(sta.arguments) = Some !args }
        match !args with
        | Cons _ args' ->
          args := args'
        | Nil ->
          assert { shift_arguments i !(sta.arguments) = None };
          raise EExit
        end
      done;
      sta.arguments := !args;
      sta.result := True
    with EExit ->
      sta.result := False
    end

  (** {3 The interpretation of statements} *)

  let rec interp_instruction (inp:input) (sta:state) (ins:instruction) : unit
    diverges
    returns { () ->
      eval_instruction (inp, context (old sta), state (old sta))
        ins (state sta, context sta, BNormal)
    }
    raises { EReturn ->
      eval_instruction (inp, context (old sta), state (old sta))
        ins (state sta, context sta, BReturn)
    }
    raises { EExit ->
      eval_instruction (inp, context (old sta), state (old sta))
        ins (state sta, context sta, BExit)
    }
  = label L in match ins with

    | IExit code ->
      match code with
      | RPrevious -> ()
      | RSuccess -> sta.result := True
      | RFailure -> sta.result := False
      end;
      assert { !(sta.result) = bool_of_return_code code !(sta.result at L) };
      raise EExit

    | IReturn code ->
      match code with
      | RPrevious -> ()
      | RSuccess -> sta.result := True
      | RFailure -> sta.result := False
      end;
      assert { !(sta.result) = bool_of_return_code code !(sta.result at L) };
      raise EReturn

    | IShift bn ->
      let n = (option_get (mk_nat 1) bn).nat in
      shift_arguments sta n;
      maybe_exit inp sta
      (* case !(sta.result); apply eval_shift with (contents (arguments sta)) *)

    | IAssignment id se ->
      let str, b = interp_str_expr True inp sta se in
      sta.var_env := !(sta.var_env)[id <- str];
      sta.result := b;
      maybe_exit inp sta

    | ISequence ins1 ins2 ->
      interp_instruction inp sta ins1;
      interp_instruction inp sta ins2

    | ISubshell ins ->
      let sta' = {
        sta with
        var_env = ref !(sta.var_env);
        arguments = ref !(sta.arguments);
      } in
      try
        interp_instruction inp sta' ins
      with
        | EExit -> ()
        | EReturn -> ()
      end;
      maybe_exit inp sta

    | INot ins ->
      try
        interp_instruction { inp with under_condition=True } sta ins;
        sta.result := notb !(sta.result)
      with
        | EReturn ->
          sta.result := notb !(sta.result);
          raise EReturn
      end;

    | IIf ins1 ins2 ins3 ->
      interp_instruction {inp with under_condition=True} sta ins1;
      if !(sta.result) then
        interp_instruction inp sta ins2
      else
        interp_instruction inp sta ins3

    | INoOutput ins ->
      let sta' = {sta with stdout = ref !(sta.stdout)} in
      interp_instruction inp sta' ins

    | IPipe ins1 ins2 ->
      (* A state for interpreting ins1 *)
      let sta1 = {
        sta with (* func_env, filesystem, stdin *)
        (* Fresh stdout *)
        stdout = ref Stdout.empty;
        (* Don't modify fields in sta that correspond to Semantics.context *)
        var_env = ref !(sta.var_env);
        arguments = ref !(sta.arguments);
        result = ref !(sta.result);
      } in
      try
        interp_instruction inp sta1 ins1;
      with
        | EExit _ -> ()
        | EReturn _ -> ()
      end;
      let sta2 = {
        sta with (* func_env, filesystem, stdout *)
        stdin = ref (Stdout.to_stdin !(sta1.stdout));
        (* Reconstruct and don't modify fields in sta that correspond to Semantics.context *)
        var_env = ref !(sta.var_env);
        arguments = ref !(sta.arguments);
      } in
      interp_instruction inp sta2 ins2

    | ICallUtility name le ->
      let args = interp_list_expr inp sta le in
      interp_utility inp sta name args

    | ICallFunction id le ->
      let args = interp_list_expr inp sta le in
      match sta.func_env id with
      | Some ins ->
        try
          let inp' = { inp with argument0 = identifier_to_string id } in
          let sta' = {
            sta with
            arguments = ref args;
            var_env = ref !(sta.var_env)
          } in
          interp_instruction inp' sta' ins
        with
          EReturn -> ()
        end
      | None ->
        sta.result := False;
        maybe_exit inp sta
      end

    | IForeach id le ins ->
      let ss = interp_list_expr inp sta le in
      let last_result = ref True in (* See NOTES[Previous in for-loop] *)
      let ghost sta0 = state sta in
      let ghost ctx0 = context sta in
      for i = 0 to length ss - 1 do
        invariant {
          eval_foreach True
            (inp, ctx0, sta0)
            id (take i ss) ins
            (state sta, context sta, BNormal)
            !last_result
        }
        invariant { forall sta1, ctx1, bhv1, b1.
          eval_foreach !last_result
            (inp, context sta, state sta)
            id (drop i ss) ins
            (sta1, ctx1, bhv1) b1 ->
          eval_foreach True
            (inp, ctx0, sta0)
            id ss ins
            (sta1, ctx1, bhv1) b1
        }
        match nth i ss with
        | Some s ->
          sta.var_env := !(sta.var_env)[id <- s];
          interp_instruction inp sta ins;
          last_result := !(sta.result);
        | None ->
          absurd
        end
      done;
      sta.result := !last_result

    | IWhile ins1 ins2 ->
      let last_result = ref True in
      let ghost sta0 = state sta in
      let ghost ctx0 = context sta in
      while (
        interp_instruction {inp with under_condition=True} sta ins1;
        !(sta.result)
      ) do
        invariant { forall sta1 ctx1 bhv1 b1.
          eval_while !last_result
            (inp, context sta, state sta)
            ins1 ins2
            (sta1, ctx1, bhv1) b1 ->
          eval_while True
            (inp, ctx0, sta0)
            ins1 ins2
            (sta1, ctx1, bhv1) b1
        }
        interp_instruction inp sta ins2;
        last_result := !(sta.result);
      done;
      sta.result := !last_result
    end

  with interp_str_expr (b:bool) (inp:input) (sta:state) (se:string_expression) : (string, bool)
    diverges
    ensures { context sta = context (old sta) }
    returns { s, b' ->
      eval_str_expr b (inp, context (old sta), state (old sta))
        se (state sta, s, b')
    }
  = match se with

    | SLiteral s ->
      s, b

    | SVariable id ->
      !(sta.var_env) id, b  (* Why3 bug: Map__Map is not created - cannot use ctx.senv[id] *)

    | SArgument n ->
      nth_argument (Cons inp.argument0 !(sta.arguments)) n.nat, b

    | SSubshell ins ->
      let sta' = {
        sta with (* filesystem; stdin; func_env *)
        stdout = ref Stdout.empty;
        result = ref !(sta.result);
        var_env = ref !(sta.var_env);
        arguments = ref !(sta.arguments);
      } in
      try
        interp_instruction inp sta' ins
      with
        | EExit -> ()
        | EReturn -> ()
      end;
      Stdout.to_string !(sta'.stdout), !(sta'.result)

    | SConcat se1 se2 ->
      label L1 in let s1, b1 = interp_str_expr b inp sta se1 in
      assert { eval_str_expr b (inp, context sta, state sta at L1) se1 (state sta, s1, b1) };
      label L2 in let s2, b2 = interp_str_expr b1 inp sta se2 in
      assert { eval_str_expr b1 (inp, context sta, state sta at L2) se2 (state sta, s2, b2) };
      s1^s2, b2
    end

  with interp_list_expr (inp:input) (sta:state) (le:list_expression) : list string
    diverges
    ensures { context sta = context (old sta) }
    returns { ss ->
      eval_list_expr (inp, context (old sta), state (old sta))
        le (state sta, ss)
    }
  = match le with
    | Nil -> Nil
    | Cons (se, sp) le_rest ->
      let s, _ = interp_str_expr True inp sta se in
      let l1 = match sp with Split -> String.split_on_default_ifs s | DontSplit -> Cons s Nil end in
      let l2 = interp_list_expr inp sta le_rest in
      l1 ++ l2
    end

  use list.FoldLeft

  let interp_program inp sta pro
    diverges
    returns { () ->
      eval_program (inp, context (old sta), state (old sta))
        pro (state sta, !(sta.result))
    }
  = try
      let fenv = interp_function_definitions sta.func_env pro.function_definitions in
      interp_instruction inp { sta with func_env = fenv } pro.instruction
    with
      | EExit -> ()
      | EReturn -> ()
    end
end