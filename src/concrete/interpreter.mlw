(** {1 An imperative interpreter of the CoLiS Language}

    See NOTES[Concrete interpreter type] for discussion on arguments.
 *)

(** A dummy filesystem - the filesystem is not modelled in the concrete interpreter *)
module Filesystem
  type filesystem = unit
  let constant empty : filesystem = ()
end

module Semantics
  use list.List

  (* Instantiate the concrete semantics with our dummy filesystem *)
  clone export semantics.Semantics with
    type filesystem = unit
end

module State
  use ref.Ref
  use list.List
  use string.String

  use semantics.Buffers
  use semantics.Context
  use semantics.Env
  use semantics.Path
  use Filesystem
  use import Semantics as S

  type sem_state = state

  (** {3 A purely imparative state} *)

  (* We use refs instead of mutable fields to be able to reuse `stdin` (and `stdout`) but
     shadow `senv`. *)
  type state = {
    (* Semantics.state *)
    filesystem : ref filesystem;
    stdin : ref stdin;
    stdout : ref stdout;
    log : ref stdout;
    (* Semantics.context *)
    var_env : ref var_env;
    func_env : func_env;
    arguments: ref (list string);
    cwd : ref normalized_path;
    result : ref bool;
  }
end

module Interpreter

  use list.List
  use list.Append
  use list.Length
  use list.Nth
  use ref.Ref
  use option.Option
  use bool.Bool
  use map.MapExt
  use int.Int
  use ref.Refint
  use string.OCaml as String

  use auxiliaries.OptionGet
  use auxiliaries.TakeDrop
  use syntax.Syntax
  use semantics.Arguments
  use semantics.Result
  use semantics.Buffers
  use semantics.Behaviour
  use semantics.Input
  use semantics.Config
  use semantics.Context
  use semantics.Env as E
  use semantics.Path
  use Filesystem as Fs
  use import Semantics as S
  use import State as St

  (** {4 Conversion to `semantics.Context`} *)

  let function sem_state (sta:state) : S.state = {
    S.filesystem = Fs.empty;
    S.stdin = !(sta.stdin);
    S.stdout = !(sta.stdout);
    S.log = !(sta.log);
  }

  let empty_state () = {
    St.filesystem = ref Filesystem.empty;
    St.var_env = ref empty_var_env;
    St.func_env = empty_func_env;
    St.arguments = ref Nil;
    St.stdin = ref Stdin.empty;
    St.stdout = ref Stdout.empty;
    St.log = ref Stdout.empty;
    St.cwd = ref default_cwd;
    St.result = ref True;
  }

  function sem_context (sta:state) : context = {
    Context.var_env = !(sta.var_env);
    Context.func_env = sta.func_env;
    Context.arguments = !(sta.arguments);
    Context.cwd = !(sta.cwd);
    Context.result = !(sta.result);
  }

  lemma context_same: forall sta1 sta2.
    !(sta1.arguments) = !(sta2.arguments) ->
    !(sta1.var_env) = !(sta2.var_env) ->
    sta1.func_env = sta2.func_env ->
    !(sta1.cwd) = !(sta2.cwd) ->
    !(sta1.result) = !(sta2.result) ->
    sem_context sta1 = sem_context sta2

  (* function sem_state (sta:state) : S.state = *)
  (*   SemState.mk_state !(sta.stdin) !(sta.stdout) *)

  lemma state_same: forall sta1 sta2.
    !(sta1.filesystem) = !(sta2.filesystem) ->
    !(sta1.stdin) = !(sta2.stdin) ->
    !(sta1.stdout) = !(sta2.stdout) ->
    !(sta1.log) = !(sta2.log) ->
    sem_state sta1 = sem_state sta2

  (** {3 Exceptions for non-normal behaviours} *)

  exception EExit
  exception EReturn
  exception EIncomplete

  let maybe_exit (inp:input) (sta:state) : unit
    returns { () ->
      behaviour inp !(sta.result) = BNormal
    }
    raises { EExit ->
      behaviour inp !(sta.result) = BExit
    }
  = if andb (strict inp.under_condition) (notb !(sta.result)) then
      raise EExit

  (** {3 Imperative wrapper around the functional interpretation of utilties} *)

  (** Interprete a command defined in the document *Specification of UNIX Commands*. *)
  val interp_utility (params: (utility_context, identifier, S.state)) : (S.state, result bool)
    ensures { S.interp_utility params result }

  let interp_utility' (inp:input) (sta:state) (id:identifier) (args:list string)
    ensures {
      let utility_ctx = {S.cwd= !(old sta.cwd); env=filter_var_env !(old sta.var_env); args=args} in
      interp_utility (utility_ctx, id, old sem_state sta) (sem_state sta, Ok !(sta.result)) /\
      behaviour inp !(sta.result) = BNormal
    }
    raises { EExit ->
      let utility_ctx = {S.cwd= !(old sta.cwd); env=filter_var_env !(old sta.var_env); args=args} in
      interp_utility (utility_ctx, id, old sem_state sta) (sem_state sta, Ok !(sta.result)) /\
      behaviour inp !(sta.result) = BExit
    }
    raises { EIncomplete ->
      let utility_ctx = {S.cwd= !(old sta.cwd); env=filter_var_env !(old sta.var_env); args=args} in
      interp_utility (utility_ctx, id, old sem_state sta) (sem_state sta, Incomplete)
    }
    raises { EIncomplete ->
      sem_context sta = sem_context (old sta)
    }
  = let utility_ctx = {S.cwd= !(sta.cwd); env=filter_var_env !(sta.var_env); args=args} in
    let sta', r = interp_utility (utility_ctx, id, sem_state sta) in
    sta.filesystem := sta'.S.filesystem;
    assert { !(sta.filesystem) = sta'.S.filesystem };
    sta.stdin := sta'.S.stdin;
    sta.stdout := sta'.S.stdout;
    sta.log := sta'.S.log;
    match r with
    | Ok b ->
      sta.result := b;
      maybe_exit inp sta
    | Incomplete ->
      raise EIncomplete
    end

  let shift_arguments sta n
    requires { n >= 0 }
    ensures {
      !(sta.result) = True ->
      Some !(sta.arguments) = shift_arguments n !(old sta.arguments)
    }
    ensures {
      !(sta.result) = False ->
      None = shift_arguments n !(old sta.arguments) /\
      !(sta.arguments) = !(old sta.arguments)
    }
  = try
      let args = ref !(sta.arguments) in
      for i = (1:int) to n do
        invariant { Length.length !(sta.arguments) >= i-1  }
        invariant { shift_arguments (i-1) !(sta.arguments) = Some !args }
        match !args with
        | Cons _ args' ->
          args := args'
        | Nil ->
          assert { shift_arguments i !(sta.arguments) = None };
          raise EExit
        end
      done;
      sta.arguments := !args;
      sta.result := True
    with EExit ->
      sta.result := False
    end

  (** {3 The interpretation of statements} *)

  let ghost ref stk : int = 0

  let rec interp_instruction (inp:input) (sta:state) (ins:instruction) : unit
    diverges
    requires { inp.config.loop_limit = Infinite }
    requires { inp.config.stack_size = Infinite }
    ensures { (old stk) = stk }
    raises { EReturn ->  (old stk) = stk }
    raises { EExit ->  (old stk) = stk }
    ensures {
      eval_instruction (old stk) (inp, sem_context (old sta), sem_state (old sta))
        ins (sem_state sta, sem_context sta, BNormal)
    }
    raises { EReturn ->
      eval_instruction (old stk) (inp, sem_context (old sta), sem_state (old sta))
        ins (sem_state sta, sem_context sta, BReturn)
    }
    raises { EExit ->
      eval_instruction (old stk) (inp, sem_context (old sta), sem_state (old sta))
        ins (sem_state sta, sem_context sta, BExit)
    }
    raises { EIncomplete ->
      eval_instruction (old stk) (inp, sem_context (old sta), sem_state (old sta))
        ins (sem_state sta, sem_context sta, BIncomplete)
    }
  = label L in
    match ins with

    | IExit code ->
      match code with
      | RPrevious -> ()
      | RSuccess -> sta.result := True
      | RFailure -> sta.result := False
      end;
      assert { !(sta.result) = bool_of_return_code code !(sta.result at L) };
      raise EExit

    | IReturn code ->
      match code with
      | RPrevious -> ()
      | RSuccess -> sta.result := True
      | RFailure -> sta.result := False
      end;
      assert { !(sta.result) = bool_of_return_code code !(sta.result at L) };
      raise EReturn

    | IShift bn ->
      let n = (option_get (mk_nat 1) bn).nat in
      shift_arguments sta n;
      maybe_exit inp sta
      (* case !(sta.result); apply eval_shift with (contents (arguments sta)) *)

    | IExport id ->
      let old_env = !(sta.var_env) in
      let var_val = {old_env[id] with exported=True} in
      sta.var_env := old_env[id <- var_val];
      sta.result := True

    | IAssignment id se ->
      let str, b = interp_str_expr True inp sta se in
      let old_env = !(sta.var_env) in
      sta.var_env := old_env[id <- str]';
      sta.result := b;
      maybe_exit inp sta

    | ISequence ins1 ins2 ->
      interp_instruction inp sta ins1;
      assert { stk = (stk at L) };
      interp_instruction inp sta ins2;
      assert { stk = (stk at L) }

    | ISubshell ins ->
      let sta' = {
        sta with
        cwd = ref !(sta.cwd);
        var_env = ref !(sta.var_env);
        arguments = ref !(sta.arguments);
      } in
      try
        interp_instruction inp sta' ins
      with
        | EExit -> ()
        | EReturn -> ()
      end;
      maybe_exit inp sta

    | INot ins ->
      try
        interp_instruction { inp with under_condition=True } sta ins;
        sta.result := notb !(sta.result)
      with
        | EReturn ->
          sta.result := notb !(sta.result);
          raise EReturn
      end;

    | IIf ins1 ins2 ins3 ->
      interp_instruction {inp with under_condition=True} sta ins1;
      if !(sta.result) then
        interp_instruction inp sta ins2
      else
        interp_instruction inp sta ins3

    | INoOutput ins ->
      let sta' = {sta with stdout = ref !(sta.stdout)} in
      interp_instruction inp sta' ins

    | IPipe ins1 ins2 ->
      (* A state for interpreting ins1 *)
      let sta1 = {
        sta with (* func_env, filesystem, stdin *)
        (* Fresh stdout *)
        stdout = ref Stdout.empty;
        (* Don't modify fields in sta that correspond to Semantics.context *)
        var_env = ref !(sta.var_env);
        arguments = ref !(sta.arguments);
        cwd = ref !(sta.cwd);
        result = ref !(sta.result);
      } in
      try
        interp_instruction inp sta1 ins1;
      with
        | EExit _ -> ()
        | EReturn _ -> ()
      end;
      let sta2 = {
        sta with (* func_env, filesystem, stdout *)
        stdin = ref (Stdout.to_stdin !(sta1.stdout));
        (* Reconstruct and don't modify fields in sta that correspond to Semantics.context *)
        var_env = ref !(sta.var_env);
        arguments = ref !(sta.arguments);
        cwd = ref !(sta.cwd);
      } in
      interp_instruction inp sta2 ins2

    | ICallUtility name le ->
      let args = interp_list_expr inp sta le in
      interp_utility' inp sta name args

    | ICallFunction id le ->
      let args = interp_list_expr inp sta le in
      match sta.func_env[id] with
      | None ->
        sta.result := False;
        maybe_exit inp sta
      | Some ins ->
        try
          let inp' = { inp with argument0 = identifier_to_string id } in
          let sta' = { sta with arguments = ref args } in
          stk <- stk+1;
          interp_instruction inp' sta' ins;
          stk <- stk-1;
          () (* Workaround for https://gitlab.inria.fr/why3/why3/issues/315 *)
        with
        | EReturn ->
          stk <- stk-1
        | EExit ->
          stk <- stk-1;
          raise EExit
        end
      end

    | IForeach id le ins ->
      let ss = interp_list_expr inp sta le in
      let last_result = ref True in (* See NOTES[Previous in for-loop] *)
      let ghost sta0 = sem_state sta in
      let ghost ctx0 = sem_context sta in
      for i = 0 to length ss - 1 do
        invariant { stk = (stk at L) }
        invariant {
          eval_foreach stk True
            (inp, ctx0, sta0)
            id (take i ss) ins
            (sem_state sta, sem_context sta, BNormal)
            !last_result
        }
        invariant { forall sta1, ctx1, bhv1, b1.
          eval_foreach stk !last_result
            (inp, sem_context sta, sem_state sta)
            id (drop i ss) ins
            (sta1, ctx1, bhv1) b1 ->
          eval_foreach stk True
            (inp, ctx0, sta0)
            id ss ins
            (sta1, ctx1, bhv1) b1
        }
        match nth i ss with
        | Some s ->
          let old_env = !(sta.var_env) in
          sta.var_env := old_env[id <- s]';
          interp_instruction inp sta ins;
          last_result := !(sta.result);
        | None ->
          absurd
        end
      done;
      sta.result := !last_result

    | IWhile ins1 ins2 ->
      let ghost sta0 = sem_state sta in
      let ghost ctx0 = sem_context sta in
      let ghost ref ctr = 0 in
      let last_result = ref True in
      while (
        interp_instruction {inp with under_condition=True} sta ins1;
        !(sta.result)
      ) do
        invariant { stk = (stk at L) }
        invariant { 0 <= ctr }
        invariant { forall sta1 ctx1 b1 bhv n.
          eval_while stk ctr !last_result
            (inp, sem_context sta, sem_state sta)
            ins1 ins2 (sta1, ctx1, bhv) n b1 ->
          eval_while stk 0 True (inp, ctx0, sta0)
            ins1 ins2 (sta1, ctx1, bhv) n b1
        }
        interp_instruction inp sta ins2;
        last_result := !(sta.result);
        ctr <- ctr+1
      done;
      sta.result := !last_result

    | ICd se ->
      (* TODO --realword should also use Unix.chdir *)
      let s, _b = interp_str_expr True inp sta se in
      let cwd_p = absolute_or_concat_relative !(sta.cwd) s in
      let pwd_s = normalized_path_to_string cwd_p in
      let args = Cons "-d" (Cons pwd_s Nil) in
      interp_utility' {inp with under_condition=True} sta identifier_test args;
      if !(sta.result) then begin
        sta.var_env := !(sta.var_env)[identifier_pwd <- pwd_s]';
        sta.cwd := cwd_p
      end;
      maybe_exit inp sta
    end

  with interp_str_expr (b:bool) (inp:input) (sta:state) (se:string_expression) : (s: string, b': bool)
    diverges
    requires { inp.config.loop_limit = Infinite }
    requires { inp.config.stack_size = Infinite }
    ensures { old stk = stk }
    ensures { sem_context sta = sem_context (old sta) }
    ensures {
      eval_str_expr (old stk) b (inp, sem_context (old sta), sem_state (old sta))
        se (sem_state sta, Ok (s, b'))
    }
    raises { EIncomplete ->
      eval_str_expr (old stk) b (inp, sem_context (old sta), sem_state (old sta))
        se (sem_state sta, Incomplete)
    }
  = match se with

    | SLiteral s ->
      s, b

    | SVariable id ->
      let env = !(sta.var_env) in
      env[id]', b 

    | SArgument n ->
      nth_argument (Cons inp.argument0 !(sta.arguments)) n.nat, b

    | SSubshell ins ->
      let sta' = {
        sta with (* filesystem; stdin; func_env *)
        stdout = ref Stdout.empty;
        result = ref !(sta.result);
        var_env = ref !(sta.var_env);
        cwd = ref !(sta.cwd);
        arguments = ref !(sta.arguments);
      } in
      try
        interp_instruction inp sta' ins
      with
        | EExit -> ()
        | EReturn -> ()
      end;
      Stdout.to_string !(sta'.stdout), !(sta'.result)

    | SConcat se1 se2 ->
      label L1 in let s1, b1 = interp_str_expr b inp sta se1 in
      assert { eval_str_expr stk b (inp, sem_context sta, sem_state sta at L1) se1 (sem_state sta, Ok (s1, b1)) };
      label L2 in let s2, b2 = interp_str_expr b1 inp sta se2 in
      assert { eval_str_expr stk b1 (inp, sem_context sta, sem_state sta at L2) se2 (sem_state sta, Ok (s2, b2)) };
      String.concat s1 s2, b2
    end

  with interp_list_expr (inp:input) (sta:state) (le:list_expression) : list string
    diverges
    requires { inp.config.loop_limit = Infinite }
    requires { inp.config.stack_size = Infinite }
    ensures { old stk = stk }
    ensures { sem_context sta = sem_context (old sta) }
    ensures {
      eval_list_expr (old stk) (inp, sem_context (old sta), sem_state (old sta))
        le (sem_state sta, Ok result)
    }
    raises { EIncomplete ->
      eval_list_expr (old stk) (inp, sem_context (old sta), sem_state (old sta))
        le (sem_state sta, Incomplete)
    }
  = match le with
    | Nil -> Nil
    | Cons (se, sp) le_rest ->
      let s, _ = interp_str_expr True inp sta se in
      let l1 = split sp s in
      let l2 = interp_list_expr inp sta le_rest in
      l1 ++ l2
    end

  use list.FoldLeft

  let interp_program inp sta pro
    diverges
    requires { inp.config.loop_limit = Infinite }
    requires { inp.config.stack_size = Infinite }
    ensures {
      eval_program (inp, sem_context (old sta), sem_state (old sta))
        pro (sem_state sta, Ok !(sta.result))
    }
    raises { EIncomplete ->
      eval_program (inp, sem_context (old sta), sem_state (old sta))
        pro (sem_state sta, Incomplete)
    }
  = try
      let fenv = interp_function_definitions sta.func_env pro.function_definitions in
      stk <- 0;
      interp_instruction inp { sta with St.func_env = fenv } pro.instruction
    with
      | EExit -> ()
      | EReturn -> ()
    end
end