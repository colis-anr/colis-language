module semantics.Env
  syntax type env "%1 Env.env"
  syntax val empty_env "Env.empty %1"
  syntax val ([]) "Env.get %1 %2"
  syntax val ([<-]) "Env.set %1 %2 %3"
  syntax type env0 "%1 Env.SMap.t"
end

module semantics.Buffers
  syntax val concat_lines "String.concat \"\n\" %1"
  syntax val split_on_default_ifs "Str.(split (regexp \"[ \t\n]+\") %1)"
end

module semantics.Path
  syntax type feature "Colis_constraints.Feat.t"
  syntax type normalized_path "Colis_constraints.Path.normal"
  syntax val default_cwd "[]"
  syntax val normalized_path_to_string "Colis_constraints.Path.normal_to_string %1"
  syntax val absolute_or_concat_relative "Colis_constraints.Path.(normalize ~cwd:%1 (from_string %2))"
end

module semantics.Context
  syntax val filter_var_env "Semantics__Context.(Env.filter_var_env (fun v -> v.exported) (fun v -> v.value) %1)"
end

module interpreter.Interpreter
  syntax val interp_utility "Utilities.interp_utility %1"
end