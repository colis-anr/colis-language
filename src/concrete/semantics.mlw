
module Result
  type result 'a = Ok 'a | Incomplete
end

(** {2 Behaviour of a CoLiS instruction} *)

module Behaviour

  use option.Option
  use bool.Bool

  (** Strict evaluation mode ("false is fatal") applies only outside of
      conditions, see NOTES[Strict] *)
  let function strict under_condition =
    notb under_condition

  type behaviour =
    | BNormal     (** Normal behaviour *)
    | BExit       (** Behaviour of exit instructions and instructions with return value false
                      outside of conditions. Cought only from subshells *)
    | BReturn     (** Return from function body. Cought by function call *)
    | BIncomplete (** Uncatchable error behaviour without correspondance to Shell behaviour.
                      Return value is undefined. Raised when crossing the boundary in while-loops. *)

  let function eq_behaviour bhv1 bhv2
    ensures { result <-> bhv1 = bhv2 }
  = match bhv1, bhv2 with
    | BNormal, BNormal
    | BExit, BExit 
    | BReturn, BReturn
    | BIncomplete, BIncomplete ->  True
    | _ -> False
    end

  (* let function behaviour (under_condition res:bool) : behaviour *)
  (*   ensures { result = BNormal \/ result = BExit } *)
  (*   returns { *)
  (*     | BNormal -> *)
  (*       under_condition = True \/ res = True *)
  (*     | BExit -> *)
  (*       under_condition = False /\ res = False *)
  (*     | BReturn | BIncomplete -> *)
  (*       false *)
  (*   } *)
  (* = if andb (strict under_condition) (notb res) *)
  (*   then BExit *)
  (*   else BNormal *)
end

(** {2 Stdin and stdout buffers} *)

module Buffers
  use list.List
  use list.Append
  use list.Reverse
  use string.OCaml as String

  (* stdin and stdout are comprised of a list of lines, cf. NOTES[Stdin/stdout] *)

  scope Stdin
    (* The list contains the lines of the stdin, to be read in-order *)
    type t = list string

    let constant empty : t = Nil

    let function is_empty stdin =
      match stdin with
      | Nil -> True
      | _ -> False
      end
  end

  type stdin = Stdin.t

  val function concat_lines (list string) : string

  val function split_on_default_ifs string : list string 

  scope Stdout

    use bool.Bool

    (** The current line and the previous lines, with the most recent line first.

        Keeping the current line and the previous lines explicitely separated (instead of
        a single list with is non-empty by invariant) simplifies stating the below lemmas
     *)
    type t = {line: string; lines: list string}

    let function all_lines out =
      Cons out.line out.lines

    let constant empty =
      { line = ""; lines = Nil }

    let function is_empty out =
      andb
       (String.(out.line = ""))
       (match out.lines with
        | Nil -> True
        | _ -> False
        end)

    (** Pipe stdout to stdin (last line is lost: NOTES[Stdin/stdout] *)
    let function to_stdin out =
      reverse (all_lines out)

    let output str out =
      { out with line = String.concat out.line str }

    let newline out =
      { line = ""; lines = Cons out.line out.lines }

    (* http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_03 *)
    let function to_string out : string =
      let rec remove_trailing_newlines lines variant { lines } =
        match lines with
        | Nil -> Nil
        | Cons l lines' ->
          if String.(l = "")
          then remove_trailing_newlines lines'
          else lines
        end
      in
      concat_lines (reverse (remove_trailing_newlines out.lines))

    (* Concatenate two stdouts (see NOTES[Stdin/stdout]).

         concat_stdout [""; "S2"; "S1"] [""; "S3"] -> concat_stdout [""; "S3; "S2"; "S1"]

       and when final lines are not closed (using `echo -n S3`):

         concat_stdout ["S3"; "S2"; "S1"] ["S5"; "S4"] -> concat_stdout ["S5"; "S3S4; "S2"; "S1"]

       Ah, here the complexity for specifying `read` that we avoided by using `list string`
       re-emerges!
    *)
    let rec function concat out1 out2
      variant { out2.lines }
      (* ensures { concat_rel out1 out2 result } *)
    = match out2.lines with
      | Nil -> {line=String.concat out1.line out2.line; lines= out1.lines}
      | Cons line2 lines2 ->
        let out3 = concat out1 {line=line2; lines=lines2} in
        {line=out2.line; lines=all_lines out3}
      end

    let rec lemma concat_empty_left (out:t)
      variant { out.lines }
      ensures {
        concat empty out = out
      }
    = match out.lines with
      | Nil -> ()
      | Cons l ls -> concat_empty_left {line=l; lines=ls}
      end


    let rec lemma concat_empty_right (out:t)
      variant { out.lines }
      ensures {
        concat out empty = out
      }
    = match out.lines with
      | Nil -> ()
      | Cons l ls -> concat_empty_right {line=l; lines=ls}
      end

    let rec lemma concat_aux (out2:t)
      variant { out2.lines }
      ensures { forall out1 line3.
        let out12 = concat out1 out2 in
        concat out1 { line = String.concat out2.line line3; lines = out2.lines }  = 
          { line = String.concat out12.line line3; lines = out12.lines }
      }
    = match out2.lines with
      | Nil -> ()
      | Cons line2 lines2 -> concat_aux { line = line2; lines = lines2 }
      end

    let rec lemma concat_assoc out3
      variant { out3.lines }
      ensures { forall out1 out2.
        concat out1 (concat out2 out3) =
          concat (concat out1 out2) out3
      }
    = match out3.lines with
      | Nil ->
        assert { forall out2.
          concat out2 out3 =
            { line = String.concat out2.line out3.line; lines = out2.lines }
        }
      | Cons line3 lines3 ->
        concat_assoc {line = line3; lines = lines3}
      end
  end

  type stdout = Stdout.t
end

(** {2 The configuration of the evaluation model} *)
module Config

  use int.Int
  use option.Option

  type limit = Finite int | Infinite

  predicate is_positive (l: limit) =
    match l with
    | Finite n -> 0 <= n
    | Infinite -> true
    end

  let predicate within_limit n l =
    match l with
    | Finite n' -> n <= n'
    | Infinite -> true
    end

  let function get_finite (l: limit) : int
    requires { l <> Infinite }
    ensures { Finite result = l }
  = match l with
    | Finite x -> x
    | Infinite -> absurd
    end

  type config = { loop_limit: limit; stack_size: limit }
    invariant { is_positive loop_limit }
    invariant { is_positive stack_size }
    by { loop_limit = Infinite; stack_size = Infinite }
end

(** {2 Read-only context for the evaluation} *)
module Input

  use bool.Bool
  use string.String
  use Config

  type input = {
    under_condition: bool; (* evaluation under condition - implying unstrict mode *)
    argument0: string;     (* $0 *)
    config: config;        (* Hide the configuration here *)
  }
end

module Env

  use syntax.Identifier
  use map.Map as M

  type env 'a = abstract { to_map : M.map identifier 'a; default: 'a }
  meta coercion function to_map

  val function empty_env (default:'a) : env 'a
    ensures { result.default = default }
    ensures { forall id. M.(result[id]) = default }

  val function ([]) (env:env 'a) (id:identifier) : 'a
    ensures { result = M.(env[id]) }

  val function ([<-]) (env:env 'a) (id:identifier) (v:'a) : env 'a
    ensures { result = M.(env[id <- v]) }
end

(** {2 Argument lists} *)
module Arguments
  use list.List
  use list.Length
  use int.Int
  use option.Option
  use string.String
  use Result

  let rec function nth_argument (args: list string) (n: int) : string
    requires { n >= 0 }
    variant { args }
  = match args with
    | Cons arg args' ->
      if n = 0
      then arg
      else nth_argument args' (n-1)
    | Nil -> ""
    end

  let rec function shift_arguments (n: int) (args: list string) : option (list string)
    requires { 0 <= n }
    variant { args }
    ensures { result = None <-> Length.length args < n }
  = if n = 0 then
      Some args
    else
      match args with
      | Nil -> None
      | Cons _ args' -> shift_arguments (n-1) args'
      end

  lemma shift_arguments_0 : forall args.
    shift_arguments 0 args = Some args

  lemma shift_arguments_cons_some : forall args [@induction] arg args' n.
    n - 1 >= 0 ->
    shift_arguments (n-1) args = Some (Cons arg args') ->
    shift_arguments n args = Some args'

  lemma shift_arguments_cons_none : forall args [@induction] n.
    n - 1 >= 0 ->
    shift_arguments (n-1) args = Some Nil ->
    shift_arguments n args = None
end

(** {2 Concrete semantics of the CoLiS language} *)
module Semantics

  use int.Int
  use list.List
  use list.Append
  use option.Option
  use bool.Bool

  use string.String
  use syntax.Syntax

  use auxiliaries.OptionGet
  use Result
  use Arguments
  use Behaviour
  use Buffers
  use Config
  use Input
  use import Env as E

  (** {3 The concrete evaluation context}

      The concrete context combines a variable environment, function environment, arguments,
      and result, and is reused in the concrete semantics, concrete interpreter and symbolic
      interpreter. *)

  (** A variable environment.

      The values in variable environemnt pair the variable value with its export state. *)
  type var_env = env var_value
  with var_value = {value: option string; exported: bool}

  (** Auxiliary function for creating an initial variable environemnt *)
  let rec add_var_bindings exported bindings env
    variant { bindings }
  = match bindings with
    | Nil -> env
    | Cons (name, value) bindings' ->
      add_var_bindings exported bindings' env[name <- {value=Some value; exported=exported}]
    end

  let constant empty_var_env =
    empty_env {value=None; exported=False}

  (** A function environment. *)
  type func_env = env (option instruction)

  let constant empty_func_env : func_env =
    empty_env None

  type normalized_path = list string

  let constant default_cwd : normalized_path = Nil

  (** For `cd` *)
  (** Append `s` to `p` if `s` is relative or just `s` as path if it is absolute *)
  val function absolute_or_concat_relative (p:normalized_path) (s:string) : normalized_path

  val function normalized_path_to_string (p:normalized_path) : string

  let constant identifier_test = identifier_of_string "test"
  let constant identifier_pwd = identifier_of_string "PWD"

  type context = {
    var_env: var_env;
    func_env: func_env;
    arguments: list string;
    cwd: normalized_path;
    result: bool; (* previous result ($?) for input state, current result for output state *)
  }

  lemma same_context: forall c1 c2.
    c1.var_env = c2.var_env ->
    c1.func_env = c2.func_env ->
    c1.arguments = c2.arguments ->
    c1.cwd = c2.cwd ->
    c1.result = c2.result ->
    c1 = c2

  let constant empty_context = {
    var_env = empty_env {value=None; exported=False};
    func_env = empty_env None;
    arguments = Nil;
    cwd = default_cwd;
    result = True;
  }

  val function filter_var_env (env:var_env) : env string
  (** A specification is not required because the result is not used inside the language
      but only in utilities which are not specified. *)
  (* ensures { forall x s. *)
  (*   env[x] = {value=Some s; exported=True} <-> result[x] = s *)
  (* } *)

  (** {3 Evaluation state}

      The evaluation state combines standard input and stdout output with the filesystem.
      The filesystem is left abstract in the semantics, and instantiated with type unit in
      the concrete interpreter and with a feature constraint in the symbolic interpreter *)

  type filesystem

  (** The state is unreversable ("following a linear logic") and each internal state should
      be consumed exactly once *)
  type state = {
    filesystem: filesystem;
    stdin: stdin;
    stdout: stdout;
    log: stdout; (** Combines stdout with utility traces and error messages *)
  }

  type utility_context = (normalized_path, env string, list string)

  (** Interprete a command defined in the document *Specification of UNIX Commands*. *)
  val function interp_utility utility_context identifier state : (state, result bool)

  axiom interp_utility_extends_output : forall ctx id sta sta' r.
    interp_utility ctx id {sta with stdout=Stdout.empty} = (sta', r) ->
    interp_utility ctx id sta = ({sta' with stdout=Stdout.concat sta.stdout sta'.stdout}, r)

  let function bool_of_return_code (c:return_code) (previous:bool) : bool =
    match c with
    | RSuccess -> True
    | RFailure -> False
    | RPrevious -> previous
    end

  let function exit_not_normal inp res =
    andb (strict inp.under_condition) (notb res)

  let function behaviour (inp:input) (res:bool) : behaviour
  = if exit_not_normal inp res
    then BExit
    else BNormal

  (** {3 Specification of the semantics} *)

  let function split sp str =
    match sp with
    | DontSplit -> Cons str Nil
    | Split -> split_on_default_ifs str
    end

  (* Reexport mixfix operators. *)

  let function ([]) (e:env 'a) (id:identifier) : 'a =
    E.(e[id])

  let function ([<-]) (e:env 'a) (id:identifier) (value:'a) : env 'a =
    E.(e[id <- value])

  (** Define mixfix operators for variable environments that retain or ignore the
      export_state flag in the environment variable. *)

  let function ([]') (e:var_env) (id:identifier) : string =
    (* Env.(e[id]).value results in faulty extraction as of why3 1.2 *)
    let var_val = e[id] in
    match var_val.value with
    | Some str -> str
    | None -> ""
    end
    
  let function ([<-]') (env:var_env) (id:identifier) (value:string) : var_env =
    env[id <- {(env[id]) with value=Some value}]

  (** Evaluation of a instruction i with input I, context C and state S resulting in an
      state S', context C', and behaviour b:

      $(I, C, S) i \Downarrow (S', C', b)$
   *)

  inductive eval_instruction (stk:int) (input, context, state) instruction (state, context, behaviour) =

  | eval_exit: forall stk inp ctx sta c.
    let ctx' = {ctx with result = bool_of_return_code c ctx.result } in
    eval_instruction stk (inp, ctx, sta) (IExit c) (sta, ctx', BExit)

  | eval_return: forall stk inp ctx sta c.
    let ctx' = { ctx with result =  bool_of_return_code c ctx.result } in
    eval_instruction stk (inp, ctx, sta) (IReturn c) (sta, ctx', BReturn)

  | eval_shift: forall stk inp ctx sta bn args.
    shift_arguments (option_get (mk_nat 1) bn).nat ctx.arguments = Some args ->
    let ctx' = { ctx with arguments = args; result = True } in
    let bhv = behaviour inp ctx'.result in
    eval_instruction stk (inp, ctx, sta) (IShift bn) (sta, ctx', bhv)

  | eval_shift_error: forall stk inp ctx sta bn.
    shift_arguments (option_get (mk_nat 1) bn).nat ctx.arguments = None ->
    let ctx' = {ctx with result = False} in
    let bhv = behaviour inp ctx'.result in
    eval_instruction stk (inp, ctx, sta) (IShift bn) (sta, ctx', bhv)

  | eval_export: forall stk inp ctx sta id.
    let var_val = {ctx.var_env[id] with exported=True} in
    let var_env = ctx.var_env[id <- var_val] in
    let ctx' = {ctx with var_env = var_env; result = True} in
    eval_instruction stk (inp, ctx, sta) (IExport id) (sta, ctx', BNormal)

  | eval_cd_arg_failure : forall stk inp ctx sta se sta'.
    eval_str_expr stk True (inp, ctx, sta) se (sta', Incomplete) ->
    eval_instruction stk (inp, ctx, sta) (ICd se) (sta', ctx, BIncomplete)

  | eval_cd_incomplete : forall stk inp ctx sta se sta1 s _b sta2.
    eval_str_expr stk True (inp, ctx, sta) se (sta1, Ok (s, _b)) ->
    (* `test -d (CWD/)s` *)
    let cwd_p = absolute_or_concat_relative ctx.cwd s in
    interp_utility (ctx.cwd, filter_var_env ctx.var_env, Cons "-d" (Cons (normalized_path_to_string cwd_p) Nil)) identifier_test sta1 = (sta2, Incomplete) ->
    eval_instruction stk (inp, ctx, sta) (ICd se) (sta2, ctx, BIncomplete)

  | eval_cd_no_dir : forall stk inp ctx sta se sta1 s _b sta2.
    eval_str_expr stk True (inp, ctx, sta) se (sta1, Ok (s, _b)) ->
    (* `test -d (CWD/)s` *)
    let cwd_p = absolute_or_concat_relative ctx.cwd s in
    interp_utility (ctx.cwd, filter_var_env ctx.var_env, Cons "-d" (Cons (normalized_path_to_string cwd_p) Nil)) identifier_test sta1 = (sta2, Ok False) ->
    let ctx1 = {ctx with result = False} in
    let bhv = behaviour inp False in
    eval_instruction stk (inp, ctx, sta) (ICd se) (sta2, ctx1, bhv)

  | eval_cd : forall stk inp ctx sta se sta1 s _b sta2.
    eval_str_expr stk True (inp, ctx, sta) se (sta1, Ok (s, _b)) ->
    (* `test -d (CWD/)s` *)
    let cwd_p = absolute_or_concat_relative ctx.cwd s in
    interp_utility (ctx.cwd, filter_var_env ctx.var_env, Cons "-d" (Cons (normalized_path_to_string cwd_p) Nil)) identifier_test sta1 = (sta2, Ok True) ->
    let ctx1 = {ctx with result = True; var_env = ctx.var_env[identifier_pwd <- normalized_path_to_string cwd_p]'; cwd = cwd_p} in
    let bhv = behaviour inp True in
    eval_instruction stk (inp, ctx, sta) (ICd se) (sta2, ctx1, bhv)

  | eval_assignment: forall stk inp ctx sta sta' id e s b.
    eval_str_expr stk True (inp, ctx, sta) e (sta', Ok (s, b)) ->
    let ctx' = { ctx with var_env = ctx.var_env[id <- s]'; result = b } in
    let bhv = behaviour inp ctx'.result in
    eval_instruction stk (inp, ctx, sta) (IAssignment id e) (sta', ctx', bhv)

  | eval_assignment_incomplete: forall stk inp ctx sta sta' id e.
    eval_str_expr stk True (inp, ctx, sta) e (sta', Incomplete) ->
    eval_instruction stk (inp, ctx, sta) (IAssignment id e) (sta', ctx, BIncomplete)
  
  | eval_sequence: forall stk inp sta sta1 sta2 ins1 ins2 ctx ctx1 ctx2 bhv2.
    eval_instruction stk (inp, ctx, sta) ins1 (sta1, ctx1, BNormal) ->
    eval_instruction stk (inp, ctx1, sta1) ins2 (sta2, ctx2, bhv2) ->
    eval_instruction stk (inp, ctx, sta) (ISequence ins1 ins2) (sta2, ctx2, bhv2)
  
  | eval_sequence_abort: forall stk inp sta sta1 ctx ctx1 ins1 ins2 bhv.
    eval_instruction stk (inp, ctx, sta) ins1 (sta1, ctx1, bhv) ->
    bhv <> BNormal ->
    eval_instruction stk (inp, ctx, sta) (ISequence ins1 ins2) (sta1, ctx1, bhv)
  
  | eval_subshell: forall stk inp sta sta' ctx ctx' ins bhv.
    eval_instruction stk (inp, ctx, sta) ins (sta', ctx', bhv) ->
    bhv <> BIncomplete ->
    let ctx'' = {ctx with result=ctx'.result} in
    let bhv' = behaviour inp ctx'.result in
    eval_instruction stk (inp, ctx, sta) (ISubshell ins) (sta', ctx'', bhv')

  | eval_subshell_incomplete: forall stk inp sta sta' ctx ctx' ins.
    eval_instruction stk (inp, ctx, sta) ins (sta', ctx', BIncomplete) ->
    let ctx'' = { ctx with result=ctx'.result} in
    eval_instruction stk (inp, ctx, sta) (ISubshell ins) (sta', ctx'', BIncomplete)

  | eval_not: forall stk inp ctx ctx' sta sta' ins bhv.
    eval_instruction stk ({inp with under_condition = True}, ctx, sta) ins (sta', ctx', bhv) ->
    (bhv = BNormal \/ bhv = BReturn) ->
    let ctx'' = {ctx' with result=notb ctx'.result} in
    eval_instruction stk (inp, ctx, sta) (INot ins) (sta', ctx'', bhv)

  | eval_not_transmit: forall stk inp ctx ctx' sta sta' ins bhv.
    eval_instruction stk ({inp with under_condition = True}, ctx, sta) ins (sta', ctx', bhv) ->
    (bhv = BExit \/ bhv = BIncomplete) ->
    eval_instruction stk (inp, ctx, sta) (INot ins) (sta', ctx', bhv)
  
  | eval_if_true: forall stk inp ctx ctx1 ctx2 sta sta1 sta2 ins1 ins2 ins3 bhv2.
    eval_instruction stk ({inp with under_condition = True}, ctx, sta) ins1 (sta1, ctx1, BNormal) ->
    ctx1.result = True ->
    eval_instruction stk (inp, ctx1, sta1) ins2 (sta2, ctx2, bhv2) ->
    eval_instruction stk (inp, ctx, sta) (IIf ins1 ins2 ins3) (sta2, ctx2, bhv2)
  
  | eval_if_false: forall stk inp ctx ctx1 ctx3 sta sta1 sta3 ins1 ins2 ins3 bhv3.
    eval_instruction stk ({inp with under_condition = True}, ctx, sta) ins1 (sta1, ctx1, BNormal) ->
    ctx1.result = False ->
    eval_instruction stk (inp, ctx1, sta1) ins3 (sta3, ctx3, bhv3) ->
    eval_instruction stk (inp, ctx, sta) (IIf ins1 ins2 ins3) (sta3, ctx3, bhv3)
  
  | eval_if_transmit_condition: forall stk inp ctx ctx1 sta sta1 ins1 ins2 ins3 bhv1.
    eval_instruction stk ({inp with under_condition = True}, ctx, sta) ins1 (sta1, ctx1, bhv1) ->
    bhv1 <> BNormal ->
    eval_instruction stk (inp, ctx, sta) (IIf ins1 ins2 ins3) (sta1, ctx1, bhv1)
  
  | eval_nooutput: forall stk inp ctx ctx' sta sta' ins bhv.
    eval_instruction stk (inp, ctx, sta) ins (sta', ctx', bhv) ->
    let sta'' = {sta' with stdout = sta.stdout} in
    eval_instruction stk (inp, ctx, sta) (INoOutput ins) (sta'', ctx', bhv)
  
  (** See NOTES[Pipe semantics] *)
  | eval_pipe: forall stk inp ctx ctx1 ctx2 sta sta1 sta2 ins1 ins2 bhv1 bhv2.
    let sta' = {sta with stdout = Stdout.empty} in
    eval_instruction stk (inp, ctx, sta') ins1 (sta1, ctx1, bhv1) -> 
    bhv1 <> BIncomplete ->
    let sta1' = {sta1 with stdout = sta.stdout; stdin = Stdout.to_stdin sta1.stdout} in
    eval_instruction stk (inp, ctx, sta1') ins2 (sta2, ctx2, bhv2) ->
    let sta2' = { sta2 with stdin = sta1.stdin } in
    let ctx' = {ctx with result=ctx2.result} in
    eval_instruction stk (inp, ctx, sta) (IPipe ins1 ins2) (sta2', ctx', bhv2)

  | eval_pipe_incomplete: forall stk inp ctx ctx1 sta sta1 ins1 ins2.
    eval_instruction stk (inp, ctx, {sta with stdout=Stdout.empty}) ins1 (sta1, ctx1, BIncomplete) -> 
    let sta1' = {sta1 with stdout = sta.stdout} in
    eval_instruction stk (inp, ctx, sta) (IPipe ins1 ins2) (sta1', ctx, BIncomplete)
  
  | eval_call_utility_args_incomplete: forall stk inp ctx sta sta' id es.
    eval_list_expr stk (inp, ctx, sta) es (sta', Incomplete) ->
    eval_instruction stk (inp, ctx, sta) (ICallUtility id es) (sta', ctx, BIncomplete)
  
  | eval_call_utility_incomplete: forall stk inp ctx sta sta' sta'' id es ss.
    eval_list_expr stk (inp, ctx, sta) es (sta', Ok ss) ->
    interp_utility (ctx.cwd, filter_var_env ctx.var_env, ss) id sta' = (sta'', Incomplete) ->
    eval_instruction stk (inp, ctx, sta) (ICallUtility id es) (sta'', ctx, BIncomplete)

  | eval_call_utility: forall stk inp ctx sta sta' sta'' id es ss b.
    eval_list_expr stk (inp, ctx, sta) es (sta', Ok ss) ->
    interp_utility (ctx.cwd, filter_var_env ctx.var_env, ss) id sta' = (sta'', Ok b) ->
    let ctx' = {ctx with result=b} in
    let bhv = behaviour inp b in
    eval_instruction stk (inp, ctx, sta) (ICallUtility id es) (sta'', ctx', bhv)

  | eval_call_function_args_incomplete: forall stk inp ctx sta sta1 id es.
    eval_list_expr stk (inp, ctx, sta) es (sta1, Incomplete) ->
    eval_instruction stk (inp, ctx, sta) (ICallFunction id es) (sta1, ctx, BIncomplete)

  | eval_call_function_not_found: forall stk inp ctx sta sta' id es ss.
    eval_list_expr stk (inp, ctx, sta) es (sta', Ok ss) ->
    ctx.func_env[id] = None ->
    let ctx' = {ctx with result=False} in
    let bhv = behaviour inp False in
    eval_instruction stk (inp, ctx, sta) (ICallFunction id es) (sta', ctx', bhv)

  | eval_call_function_stack_limit: forall stk inp ctx sta sta1 id es args ins.
    eval_list_expr stk (inp, ctx, sta) es (sta1, Ok args) ->
    ctx.func_env[id] = Some ins ->
    inp.config.stack_size = Finite stk ->
    eval_instruction stk (inp, ctx, sta) (ICallFunction id es) (sta1, ctx, BIncomplete)

  | eval_call_function: forall stk inp ctx ctx2 sta sta1 sta2 id es args ins bhv.
    eval_list_expr stk (inp, ctx, sta) es (sta1, Ok args) ->
    ctx.func_env[id] = Some ins ->
    inp.config.stack_size <> Finite stk ->
    let inp1 = { inp with argument0 = identifier_to_string id } in
    let ctx1 = { ctx with arguments = args } in
    eval_instruction (stk+1) (inp1, ctx1, sta1) ins (sta2, ctx2, bhv) ->
    let bhv' = if bhv = BReturn then BNormal else bhv in
    let ctx' = { ctx2 with arguments = ctx.arguments } in
    eval_instruction stk (inp, ctx, sta) (ICallFunction id es) (sta2, ctx', bhv')
  
  | eval_foreach_args_incomplete: forall stk inp ctx sta sta' id es ins.
    eval_list_expr stk (inp, ctx, sta) es (sta', Incomplete) -> 
    eval_instruction stk (inp, ctx, sta) (IForeach id es ins) (sta', ctx, BIncomplete)
  
  | eval_foreach: forall stk inp ctx ctx' sta sta' sta'' id es ins ss bhv b.
    eval_list_expr stk (inp, ctx, sta) es (sta', Ok ss) -> 
    eval_foreach stk True (inp, ctx, sta') id ss ins (sta'', ctx', bhv) b ->
    let ctx'' = {ctx' with result=b} in
    eval_instruction stk (inp, ctx, sta) (IForeach id es ins) (sta'', ctx'', bhv)

  | eval_while: forall stk inp ctx ctx' sta sta' ins1 ins2 n b.
    eval_while stk 0 True (inp, ctx, sta) ins1 ins2 (sta', ctx', BNormal) n b ->
    let ctx'' = {ctx' with result=b} in
    eval_instruction stk (inp, ctx, sta) (IWhile ins1 ins2) (sta', ctx'', BNormal)

  | eval_while_abort: forall stk inp ctx ctx' sta sta' ins1 ins2 bhv n b.
    bhv <> BNormal ->
    eval_while stk 0 True (inp, ctx, sta) ins1 ins2 (sta', ctx', bhv) n b ->
    eval_instruction stk (inp, ctx, sta) (IWhile ins1 ins2) (sta', ctx', bhv)

  (** Semantics of the while loop.

      http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_09_04_09

      stk, ctr, b, (N, I, C, S) i1 i2 ⇓w (S', C', β), n, b'

      stk: stack height
      ctr: start loop count
      b: previous result
      n: total loop count
      b: loop result
   *)
  with eval_while int int bool (input, context, state) instruction instruction (state, context, behaviour) int bool =

  (** Loop limit *)
  | eval_while_loop_limit: forall stk ctr b inp ctx sta ins1 ins2.
    0 <= ctr ->
    inp.config.loop_limit = Finite ctr ->
    eval_while stk ctr b (inp, ctx, sta) ins1 ins2 (sta, ctx, BIncomplete) ctr b

  (** Condition not normal *)
  | eval_while_abort_condition: forall stk ctr b inp ctx ctx1 sta sta1 ins1 ins2 bhv1.
    0 <= ctr ->
    inp.config.loop_limit <> Finite ctr ->
    eval_instruction stk ({inp with under_condition = True}, ctx, sta) ins1 (sta1, ctx1, bhv1) ->
    bhv1 <> BNormal ->
    eval_while stk ctr b (inp, ctx, sta) ins1 ins2 (sta1, ctx1, bhv1) ctr b

  (** Condition false *)
  | eval_while_false: forall stk ctr b inp ctx ctx1 sta sta1 ins1 ins2.
    0 <= ctr ->
    inp.config.loop_limit <> Finite ctr ->
    ctx1.result = False ->
    eval_instruction stk ({inp with under_condition = True}, ctx, sta) ins1 (sta1, ctx1, BNormal) ->
    eval_while stk ctr b (inp, ctx, sta) ins1 ins2 (sta1, ctx1, BNormal) ctr b

  (** Condition true but while-body not normal *)
  | eval_while_abort_body: forall stk ctr b bhv2 inp ctx ctx1 ctx2 sta sta1 sta2 ins1 ins2.
    0 <= ctr ->
    inp.config.loop_limit <> Finite ctr ->
    eval_instruction stk ({inp with under_condition = True}, ctx, sta) ins1 (sta1, ctx1, BNormal) ->
    ctx1.result = True ->
    eval_instruction stk (inp, ctx1, sta1) ins2 (sta2, ctx2, bhv2) ->
    bhv2 <> BNormal ->
    eval_while stk ctr b (inp, ctx, sta) ins1 ins2 (sta2, ctx2, bhv2) ctr b

  (** Condition true, body normal, loop again *)
  | eval_while_loop: forall stk ctr n b b3 inp ctx ctx1 ctx2 ctx3 sta sta1 sta2 sta3 ins1 ins2 bhv3.
    0 <= ctr <= n ->
    inp.config.loop_limit <> Finite ctr ->
    eval_instruction stk ({inp with under_condition = True}, ctx, sta) ins1 (sta1, ctx1, BNormal) ->
    ctx1.result = True ->
    eval_instruction stk (inp, ctx1, sta1) ins2 (sta2, ctx2, BNormal) ->
    eval_while stk (ctr+1) ctx2.result (inp, ctx2, sta2) ins1 ins2 (sta3, ctx3, bhv3) n b3 ->
    eval_while stk ctr b (inp, ctx, sta) ins1 ins2 (sta3, ctx3, bhv3) n b3

  (** Semantics of the for loop

      http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_09_04_03
   *)
  with eval_foreach int bool (input, context, state) identifier (list string) instruction (state, context, behaviour) bool =

  | eval_foreach_done: forall stk b inp ctx sta id ins.
    eval_foreach stk b (inp, ctx, sta) id Nil ins (sta, ctx, BNormal) b

  | eval_foreach_abort: forall stk b inp ctx ctx1 sta sta1 id s ss' ins bhv1.
    let ctx' = {ctx with var_env = ctx.var_env[id <- s]'} in
    eval_instruction stk (inp, ctx', sta) ins (sta1, ctx1, bhv1) ->
    bhv1 <> BNormal ->
    eval_foreach stk b (inp, ctx, sta) id (Cons s ss') ins (sta1, ctx1, bhv1) ctx1.result

  | eval_foreach_step: forall stk b b2 inp ctx ctx1 ctx2 sta sta1 sta2 id s ss' ins bhv2.
    let ctx' = {ctx with var_env = ctx.var_env[id <- s]'} in
    eval_instruction stk (inp, ctx', sta) ins (sta1, ctx1, BNormal) ->
    eval_foreach stk ctx1.result (inp, ctx1, sta1) id ss' ins (sta2, ctx2, bhv2) b2 ->
    eval_foreach stk b (inp, ctx, sta) id (Cons s ss') ins (sta2, ctx2, bhv2) b2

  (** Evaluation of an expression with some input I, context C, and state S, resulting in
      another state S, a string and an output comprised of a string result and an optional
      boolean behaviour (only $(...) has a behaviour):

      $Bool (Input, Context, State) i ⇓ (State, Result (String × Bool))$
   *)
  with eval_str_expr int bool (input, context, state) string_expression (state, result (string, bool))  =

  | eval_str_literal: forall stk b inp ctx sta str. 
    let res = Ok (str, b) in
    eval_str_expr stk b (inp, ctx, sta) (SLiteral str) (sta, res)

  | eval_str_variable: forall stk b inp ctx sta id.
    let str = ctx.var_env[id]' in
    let res = Ok (str, b) in
    eval_str_expr stk b (inp, ctx, sta) (SVariable id) (sta, res)

  | eval_str_arg: forall stk b inp ctx sta n.
    let str = nth_argument (Cons inp.argument0 ctx.arguments) n.nat in
    let res = Ok (str, b) in
    eval_str_expr stk b (inp, ctx, sta) (SArgument n) (sta, res)

  | eval_str_subshell_incomplete: forall stk b inp ctx ctx1 sta sta1 ins.
    eval_instruction stk (inp, ctx, {sta with stdout=Stdout.empty}) ins (sta1, ctx1, BIncomplete) ->
    let sta1' = {sta1 with stdout=sta.stdout} in
    eval_str_expr stk b (inp, ctx, sta) (SSubshell ins) (sta1', Incomplete)

  | eval_str_subshell: forall stk b inp ctx ctx1 sta sta1 ins bhv1.
    eval_instruction stk (inp, ctx, {sta with stdout=Stdout.empty}) ins (sta1, ctx1, bhv1) ->
    bhv1 <> BIncomplete ->
    let sta1' = {sta1 with stdout = sta.stdout} in
    let res = Ok (Stdout.to_string sta1.stdout, ctx1.result) in
    eval_str_expr stk b (inp, ctx, sta) (SSubshell ins) (sta1', res)

  | eval_str_concat_incomplete_1 : forall stk b inp ctx sta sta1 e1 e2.
    eval_str_expr stk b (inp, ctx, sta) e1 (sta1, Incomplete) ->
    eval_str_expr stk b (inp, ctx, sta) (SConcat e1 e2) (sta1, Incomplete)

  | eval_str_concat_incomplete_2 : forall stk b b1 inp ctx sta sta1 sta2 e1 e2 str1.
    eval_str_expr stk b (inp, ctx, sta) e1 (sta1, Ok (str1, b1)) ->
    eval_str_expr stk b1 (inp, ctx, sta1) e2 (sta2, Incomplete) ->
    eval_str_expr stk b (inp, ctx, sta) (SConcat e1 e2) (sta2, Incomplete)

  | eval_str_concat : forall stk b b1 b2 inp ctx sta sta1 sta2 e1 e2 str1 str2.
    eval_str_expr stk b (inp, ctx, sta) e1 (sta1, Ok (str1, b1)) ->
    eval_str_expr stk b1 (inp, ctx, sta1) e2 (sta2, Ok (str2, b2)) ->
    let res = Ok (String.concat str1 str2, b2) in
    eval_str_expr stk b (inp, ctx, sta) (SConcat e1 e2) (sta2, res)

  (** Evaluation of expressions to a list of strings:

      $Bool (Input, Context, State) le ⇓ (State, Result (List String))$
   *)
  with eval_list_expr int (input, context, state) list_expression (state, result (list string)) =

    | eval_list_expr_nil: forall stk inp ctx sta.
      eval_list_expr stk (inp, ctx, sta) Nil (sta, Ok Nil)

    (* Error in the head string expression *)
    | eval_list_expr_head_incomplete: forall stk inp ctx sta sta1 se sp es.
      eval_str_expr stk True (inp, ctx, sta) se (sta1, Incomplete) ->
      eval_list_expr stk (inp, ctx, sta) (Cons (se, sp) es) (sta1, Incomplete)

    (* Error in some tail string expression *)
    | eval_list_expr_tail_incomplete: forall stk inp ctx sta sta1 sta2 se sp es s b1.
      eval_str_expr stk True (inp, ctx, sta) se (sta1, Ok (s, b1)) ->
      eval_list_expr stk (inp, ctx, sta1) es (sta2, Incomplete) ->
      eval_list_expr stk (inp, ctx, sta) (Cons (se, sp) es) (sta2, Incomplete)

    | eval_list_expr_cons: forall stk inp ctx sta sta1 sta2 se sp es s b1 l2.
      eval_str_expr stk True (inp, ctx, sta) se (sta1, Ok (s, b1)) ->
      eval_list_expr stk (inp, ctx, sta1) es (sta2, Ok l2) ->
      let l3 = split sp s ++ l2 in
      eval_list_expr stk (inp, ctx, sta) (Cons (se, sp) es) (sta2, Ok l3)

  (** Evaluation of a program. It outputs in a boolean value *)
  inductive eval_function_definitions func_env (list function_definition) func_env =

    | eval_function_definitions_done: forall fenv.
      eval_function_definitions fenv Nil fenv

    | eval_function_definition: forall e e' id ins defs.
      eval_function_definitions e[id <- Some ins] defs e' ->
      eval_function_definitions e (Cons (id, ins) defs) e'

  let rec lemma no_while_incomplete (ctr n:int) (cnf:config) (ins1 ins2:instruction)
    requires { 0 <= ctr <= n }
    requires { cnf.loop_limit = Infinite }
    variant { n - ctr }
    ensures {
      (forall stk inp ctx ctx' sta sta' bhv.
       eval_instruction stk ({inp with config=cnf}, ctx, sta) ins1 (sta', ctx', bhv) ->
       bhv <> BIncomplete) ->
      (forall stk inp ctx ctx' sta sta' bhv.
       eval_instruction stk ({inp with config=cnf}, ctx, sta) ins2 (sta', ctx', bhv) ->
       bhv <> BIncomplete) ->
      forall stk inp ctx ctx' sta sta' b b' bhv.
      eval_while stk ctr b ({inp with config=cnf}, ctx, sta) ins1 ins2 (sta', ctx', bhv) n b' ->
      bhv <> BIncomplete
    }
  = if n = ctr then () else no_while_incomplete (ctr+1) n cnf ins1 ins2

  let rec interp_function_definitions (fenv:func_env) (defs:list function_definition)
    variant { defs }
    ensures { eval_function_definitions fenv defs result }
  = match defs with
    | Nil -> fenv
    | Cons (id, instr) defs' ->
      interp_function_definitions fenv[id <- Some instr]  defs'
    end

  (** Evaluation of a CoLis program. *)
  inductive eval_program (input, context, state) program (state, result bool) =

    | eval_program: forall inp ctx fenv ctx' sta sta' pro bhv.
      eval_function_definitions ctx.func_env pro.function_definitions fenv ->
      eval_instruction 0 (inp, { ctx with func_env = fenv }, sta) pro.instruction (sta', ctx', bhv) ->
      bhv <> BIncomplete ->
      eval_program (inp, ctx, sta) pro (sta', Ok ctx'.result)

    | eval_program_incomplete: forall inp ctx ctx' sta sta' pro fenv.
      eval_function_definitions ctx.func_env pro.function_definitions fenv ->
      eval_instruction 0 (inp, { ctx with func_env = fenv }, sta) pro.instruction (sta', ctx', BIncomplete) ->
      eval_program (inp, ctx, sta) pro (sta', Incomplete)

  (* lemma eval_instruction_functional: forall ins[@induction] inp (\*out1 out2*\) ctx ctx1 ctx2 sta sta1 sta2 bhv1 bhv2. *)
  (*   eval_instruction (inp, ctx, sta) (\* { sta with stdout = out1 } *\) ins (sta1, ctx1, bhv1) -> *)
  (*   eval_instruction (inp, ctx, sta) (\* { sta with stdout = out2 } *\) ins (sta2, ctx2, bhv2) -> *)
  (*   sta1 = sta2 /\ ctx1 = ctx2 /\ bhv1 = bhv2 *)

  (** {3 Auxiliary lemmas for foreach} *)

  lemma eval_foreach_nil: forall stk b b1 inp ctx ctx1 sta sta1 id ins bhv1.
    eval_foreach stk b (inp, ctx, sta) id Nil ins (sta1, ctx1, bhv1) b1 ->
    sta1 = sta1 /\ ctx1 = ctx /\ bhv1 = BNormal /\ b = b1

  let rec lemma eval_foreach_concat (ss1:list string)
    ensures { forall stk b inp b1 b2 ctx ctx1 ctx2 sta sta1 sta2 id ins ss2 bhv2.
      eval_foreach stk b (inp, ctx, sta) id ss1 ins (sta1, ctx1, BNormal) b1 ->
      eval_foreach stk b1 (inp, ctx1, sta1) id ss2 ins (sta2, ctx2, bhv2) b2 ->
      eval_foreach stk b (inp, ctx, sta) id (ss1 ++ ss2) ins (sta2, ctx2, bhv2) b2
    }
  = match ss1 with
    | Nil -> ()
    | Cons _ ss1' -> eval_foreach_concat ss1'
    end

  let rec lemma eval_foreach_last (ss:list string)
    ensures { forall stk b b1 inp ctx ctx1 ctx2 sta sta1 sta2 id s ins bhv2.
      eval_foreach stk b (inp, ctx, sta) id ss ins (sta1, ctx1, BNormal) b1 ->
      let ctx1' = {ctx1 with var_env = ctx1.var_env[id <- s]'} in
      eval_instruction stk (inp, ctx1', sta1) ins (sta2, ctx2, bhv2) ->
      let b' = ctx2.result in
      eval_foreach stk b (inp, ctx, sta) id (ss ++ Cons s Nil) ins (sta2, ctx2, bhv2) b'
    }
  = match ss with
    | Nil -> ()
    | Cons _ ss' -> eval_foreach_last ss'
    end
end
