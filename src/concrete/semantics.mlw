
module Filesystem
  type filesystem
  val constant empty_filesystem: filesystem
end

module Environment
  use map.Map
  use syntax.Variable
  use mystring.String
  
  type env 'a = map variable 'a

  let constant empty_env =
    fun _ -> String.empty (* Cannot use map.Const because Map__Const is not extracted... *)

  let function ([<-]) (e:env 'a) (var:variable) (value:'a) : variable -> 'a
    ensures { result[var] = value }
    ensures { forall var'. var' <> var -> result[var'] = e[var'] }
  = fun var' ->
      if variable_eq var' var
      then value
      else e var'
end

module Behaviour

  use option.Option
  use bool.Bool

  (** Strict evaluation mode ("false is fatal") applies only outside of
      conditions, see NOTES[Strict] *)
  let function strict under_condition =
    notb under_condition

  (* No functions (see NOTES[Functions]), no return-behaviour *)
  type behaviour =
    | BNormal bool
    | BExit bool

  let function bool_of_behaviour (b:behaviour) : bool =
    match b with
    | BNormal b'
    | BExit b' -> b'
    end

  let function bool_opt_compose (bo1 bo2: option bool) : option bool =
    match bo2 with
    | Some _ -> bo2
    | None -> bo1
    end
end

module Buffers
  use list.List
  use list.Append
  use list.Reverse
  use mystring.String

  (* stdin and stdout are comprised of a list of lines, cf. NOTES[Stdin/stdout] *)

  (* The list contains the lines of the stdin, to be read in-order *)
  type stdin = list string

  let constant empty_stdin : stdin = Nil

  (* The list contains the lines of the stdout, with the most recent first *)
  type stdout = { lines: list string }
    invariant { lines <> Nil }
    by { lines = Cons String.empty Nil }

  let constant empty_stdout =
    { lines = Cons String.empty Nil }

  (** Pipe stdout to stdin (last line is lost: NOTES[Stdin/stdout] *)
  let function stdout_to_stdin stdout =
    reverse stdout.lines

  let output (str:string) (out:stdout) =
    match out.lines with
      | Cons l ls ->
        {lines = Cons (l^str) ls}
    end

  let newline out =
    { lines = Cons String.empty out.lines }

  (* http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_03 *)
  let function stdout_to_string (out: stdout) : string =
    let rec remove_trailing_newlines lines variant { lines } =
      match lines with
      | Nil -> Nil
      | Cons l lines' ->
        if String.(equal l empty)
        then remove_trailing_newlines lines'
        else lines
      end
    in
    concat (reverse (remove_trailing_newlines out.lines))

  (* Concatenate two stdouts (see NOTES[Stdin/stdout]).

     concat_stdout [""; "S2"; "S1"] [""; "S3"] -> concat_stdout [""; "S3; "S2"; "S1"]

     and when final lines are not closed (using `echo -n S3`):

     concat_stdout ["S3"; "S2"; "S1"] ["S5"; "S4"] -> concat_stdout ["S5"; "S3S4; "S2"; "S1"]

     Ah, here the complexity for specifying `read` that we avoided by using `list string`
     re-emerges!
   *)
  let function concat_stdout (sout1 sout2:stdout) : stdout =
    let rec function aux l1 l2
      requires { l1 <> Nil }
      requires { l2 <> Nil }
      variant { l2 }
    = match l2 with
      | Cons s2 Nil ->
        match l1 with
        | Cons s1 l1_rest ->
          Cons (s1 ^ s2) l1_rest
        | Nil -> absurd
        end
      | Cons s2 l2_rest ->
        Cons s2 (aux l1 l2_rest)
      | Nil -> absurd
      end
    in {lines = aux sout1.lines sout2.lines}

  let function diff (out1 out2:stdout) =
    empty_stdout (* FIXME *)
end

(** {2 Contexts for the evaluation}

    NOTES[Evaluation relation]
 *)

module Context

  use array.Array
  use map.Map
  use bool.Bool
  use list.List
  use list.Reverse
  use list.Append

  use mystring.String
  use syntax.Variable

  use Filesystem
  use Behaviour
  use Buffers
  use Environment

  (** {3 Read-only context for the evaluation of a term} *)

  type input = {
    arguments: array string;
    under_condition: bool; (* evaluation under condition - implying unstrict mode *)
    previous_result: bool; (* result of last command, i.e. `$?`, default `True` *)
  }

  let constant empty_input = {
    arguments = Array.make 0 String.empty;
    previous_result = True;
    under_condition = False;
  }

  (** {3 Read/write context for the evaluation of a term} *)

  (** The state is unreversable ("following a linear logic") and each internal state should
      be consumed exactly once *)
  type state = {
    filesystem: filesystem;
    stdin: stdin;
    stdout: stdout;
  }

  let constant empty_state = {
    filesystem = empty_filesystem;
    stdin = empty_stdin;
    stdout = empty_stdout;
  }

  (** The context of the interpretation, resulting contexts may be ignored (e.g., from
      subprocesses)

      Will contain also the function environment one functions are added to the language
   *)

  type context = {
    senv: env string;
  }

  let constant empty_context = {
    senv = empty_env; 
  }
end

(** {2 Semantics of the CoLiS language} *)

module Semantics

  use list.List
  use list.Append
  use option.Option
  use map.Map
  use bool.Bool

  use mystring.String
  use syntax.Syntax

  use Behaviour
  use Context
  use Buffers

  let function bool_of_return_code (c:return_code) (previous_result:bool) : bool =
    match c with
    | RSuccess -> True
    | RFailure -> False
    | RPrevious -> previous_result
    end

  let function inject_behaviour (inp:input) (ret:bool) : behaviour =
    if andb (strict inp.under_condition) (notb ret)
    then BExit False
    else BNormal ret

  let function opt_inject_behaviour (inp:input) (ret_opt:option bool) : behaviour =
    match ret_opt with
    | Some ret -> inject_behaviour inp ret
    | None -> BNormal True
    end

  let function option_get default opt =
    match opt with Some x -> x | None -> default end

  (** Interprete a command defined in the document *Specification of UNIX Commands*.

      It acts upon the input and irreversable state, and returns a stdout, a behaviour
      (True/False), and another irreversable state, see also NOTES[Callees] *)
  val function interp_builtin state string (list string) :
    (state, bool)


  (** Evaluation of a instruction i with input I, context C and state S resulting in an
      state S', context C', and behaviour b:

      $(I, C, S) i \Downarrow (S', C', b)$
   *)

  inductive eval_instruction input context state instruction state context behaviour =

  | eval_exit: forall inp ctx sta c.
    let b = bool_of_return_code c inp.previous_result in
    let bhv = BExit b in
    eval_instruction inp ctx sta (IExit c) sta ctx bhv

  | eval_assign: forall inp ctx sta sta' v e s bo.
    eval_str_expr inp ctx sta e sta' s bo ->
    let ctx' = {ctx with senv = ctx.senv[v <- s]} in
    let bhv = inject_behaviour inp (option_get True bo) in
    eval_instruction inp ctx sta (IAssignment v e) sta' ctx' bhv
  
  | eval_sequence_normal: forall inp sta sta1 sta2 ins1 ins2 ctx ctx1 ctx2 b1 bhv2.
    eval_instruction inp ctx sta ins1 sta1 ctx1 (BNormal b1) ->
    eval_instruction {inp with previous_result = b1} ctx1 sta1 ins2 sta2 ctx2 bhv2 ->
    eval_instruction inp ctx sta (ISequence ins1 ins2) sta2 ctx2 bhv2
  
  | eval_sequence_abort: forall inp sta sta1 ctx ctx1 ins1 ins2 b.
    let bhv = BExit b in
    eval_instruction inp ctx sta ins1 sta1 ctx1 bhv ->
    eval_instruction inp ctx sta (ISequence ins1 ins2) sta1 ctx1 bhv
  
  | eval_subshell: forall inp sta sta' ctx ctx' ins bhv.
    eval_instruction inp ctx sta ins sta' ctx' bhv ->
    (* `Normal false` turns to `Exit False` in strict mode - the line `set -e; (! true);
       echo A/$?` prints nothing *)
    let bhv' = inject_behaviour inp (bool_of_behaviour bhv) in
    eval_instruction inp ctx sta (ISubshell ins) sta' ctx bhv'

  | eval_not: forall inp ctx ctx' sta sta' ins b.
    eval_instruction {inp with under_condition = True} ctx sta ins sta' ctx' (BNormal b) ->
    let bhv' = BNormal (notb b) in
    eval_instruction inp ctx sta (INot ins) sta' ctx' bhv'

  | eval_not_transmit: forall inp ctx ctx' sta sta' ins b.
    let bhv = BExit b in
    eval_instruction {inp with under_condition = True} ctx sta ins sta' ctx' bhv ->
    eval_instruction inp ctx sta (INot ins) sta' ctx' bhv
  
  | eval_if_true: forall inp ctx ctx1 ctx2 sta sta1 sta2 ins1 ins2 ins3 bhv2.
    eval_instruction {inp with under_condition = True} ctx sta ins1 sta1 ctx1 (BNormal True) ->
    eval_instruction {inp with previous_result = True} ctx1 sta1 ins2 sta2 ctx2 bhv2 ->
    eval_instruction inp ctx sta (IIf ins1 ins2 ins3) sta2 ctx2 bhv2
  
  | eval_if_false: forall inp ctx ctx1 ctx3 sta sta1 sta3 ins1 ins2 ins3 bhv3.
    eval_instruction {inp with under_condition = True} ctx sta ins1 sta1 ctx1 (BNormal False) ->
    eval_instruction {inp with previous_result = False} ctx1 sta1 ins3 sta3 ctx3 bhv3 ->
    eval_instruction inp ctx sta (IIf ins1 ins2 ins3) sta3 ctx3 bhv3
  
  | eval_if_transmit: forall inp ctx ctx1 sta sta1 ins1 ins2 ins3 b.
    let bhv1 = BExit b in
    eval_instruction {inp with under_condition = True} ctx sta ins1 sta1 ctx1 bhv1 ->
    eval_instruction inp ctx sta (IIf ins1 ins2 ins3) sta1 ctx1 bhv1
  
  | eval_nooutput: forall inp ctx ctx' sta sta' ins bhv.
    eval_instruction inp ctx sta ins sta' ctx' bhv ->
    let sta'' = {sta' with stdout = sta.stdout} in
    eval_instruction inp ctx sta (INoOutput ins) sta'' ctx' bhv
  
  (** See NOTES[Pipe semantics] *)
  | eval_pipe: forall inp ctx ctx1 ctx2 sta sta1 sta2 ins1 ins2 bhv1 bhv2.
    let sta' = {sta with stdout = empty_stdout} in
    eval_instruction inp ctx sta' ins1 sta1 ctx1 bhv1 ->
    let sta1' = {sta1 with stdout = sta.stdout; stdin = stdout_to_stdin sta1.stdout} in
    eval_instruction inp ctx sta1' ins2 sta2 ctx2 bhv2 ->
    (* TODO Really ignore context changes from ins1 and ins2 in the context? *)
    eval_instruction inp ctx sta (IPipe ins1 ins2) sta2 ctx bhv2
  
  | eval_call: forall inp ctx sta sta' sta'' s es ss b.
    eval_list_expr inp ctx sta es sta' ss ->
    (sta'', b) = interp_builtin sta' s ss ->
    let bhv = inject_behaviour inp b in
    eval_instruction inp ctx sta (ICall s es) sta'' ctx bhv
  
  | eval_foreach: forall inp ctx ctx' sta sta' sta'' v es ins ss bhv.
    eval_list_expr inp ctx sta es sta' ss -> 
    (* The behaviour of empty for-loops is `BNormal True` *)
    eval_foreach (BNormal True) inp ctx sta' v ss ins sta'' ctx' bhv ->
    eval_instruction inp ctx sta (IForeach v es ins) sta'' ctx' bhv

  | eval_while: forall inp ctx ctx' sta sta' ins1 ins2 bhv.
    (* The behaviour of empty while-loops is `BNormal True` *)
    eval_while (BNormal True) inp ctx sta ins1 ins2 sta' ctx' bhv ->
    eval_instruction inp ctx sta (IWhile ins1 ins2) sta' ctx' bhv

  (* The first parameter is the previous behaviour, or the behaviour of the empty loop initially *)
  with eval_while behaviour input context state instruction instruction state context behaviour =

  (** while-condition is false *)
  | eval_while_false: forall bhv inp ctx ctx1 sta sta1 ins1 ins2.
    eval_instruction {inp with under_condition = True} ctx sta ins1 sta1 ctx1 (BNormal False) ->
    eval_while bhv inp ctx sta ins1 ins2 sta1 ctx1 bhv

  (** while-condition is not normal *)
  | eval_while_transmit: forall bhv inp ctx ctx1 sta sta1 ins1 ins2 b.
    let bhv1 = BExit b in
    eval_instruction {inp with under_condition = True} ctx sta ins1 sta1 ctx1 bhv1 ->
    eval_while bhv inp ctx sta ins1 ins2 sta1 ctx1 bhv1

  (** while-condition true but while-body not normal *)
  | eval_while_true_transmit: forall bhv inp ctx ctx1 ctx2 sta sta1 sta2 ins1 ins2 b.
    eval_instruction {inp with under_condition = True} ctx sta ins1 sta1 ctx1 (BNormal True) ->
    let bhv2 = BExit b in
    eval_instruction inp ctx1 sta1 ins2 sta2 ctx2 bhv2 ->
    eval_while bhv inp ctx sta ins1 ins2 sta2 ctx2 bhv2

  (** while-condition true, body normal, and loop again *)
  | eval_while_true_loop: forall bhv inp ctx ctx1 ctx2 ctx3 sta sta1 sta2 sta3 ins1 ins2 b bhv3.
    eval_instruction {inp with under_condition = True} ctx sta ins1 sta1 ctx1 (BNormal True) ->
    eval_instruction inp ctx1 sta1 ins2 sta2 ctx2 (BNormal b) ->
    eval_while (BNormal b) {inp with previous_result = b} ctx2 sta2 ins1 ins2 sta3 ctx3 bhv3 ->
    eval_while bhv inp ctx sta ins1 ins2 sta3 ctx3 bhv3

  (* The first parameter is the previous behaviour, or the behaviour of the empty loop initially *)
  with eval_foreach behaviour input context state variable (list string) instruction state context behaviour =

  | eval_foreach_nil: forall bhv inp ctx sta x ins.
    eval_foreach bhv inp ctx sta x Nil ins sta ctx bhv

  | eval_foreach_cons: forall bhv inp ctx ctx1 ctx2 sta sta1 sta2 x s ss ins bhv1 bhv2.
    eval_instruction inp {ctx with senv = ctx.senv[x <- s]} sta ins sta1 ctx1 bhv1 ->
    eval_foreach bhv1 inp ctx1 sta1 x ss ins sta2 ctx2 bhv2 ->
    eval_foreach bhv inp ctx sta x (Cons s ss) ins sta2 ctx2 bhv2

  (** Evaluation of an expression with some input I, context C, and state S, resulting in
      another state S, a string and an output comprised of a string result and an optional
      boolean behaviour (only $(...) has a behaviour):

      $(Input, Context, State) e \Downarrow (State, String, OptBool)$
   *)
  with eval_str_expr input context state string_expression state string (option bool)  =

  | eval_str_literal: forall inp ctx sta s. 
    eval_str_expr inp ctx sta (SLiteral s) sta s None

  | eval_str_variable: forall inp ctx sta v.
    let s = ctx.senv[v] in
    eval_str_expr inp ctx sta (SVariable v) sta s None

  | eval_str_subshell: forall inp ctx ctx' sta sta2 stm bhv.
    let sta1 = {sta with stdout = empty_stdout} in
    eval_instruction inp ctx sta1 stm sta2 ctx' bhv ->
    let sta3 = {sta2 with stdout = sta.stdout} in
    let s = Buffers.stdout_to_string sta2.stdout in
    let bo = Some (bool_of_behaviour bhv) in
    eval_str_expr inp ctx sta (SSubshell stm) sta3 s bo

  | eval_str_concat : forall inp ctx sta sta1 sta2 e1 e2 s1 s2 bo1 bo2.
    eval_str_expr inp ctx sta e1 sta1 s1 bo1 ->
    eval_str_expr inp ctx sta1 e2 sta2 s2 bo2 ->
    let bo3 = bool_opt_compose bo1 bo2 in
    let s3 = s1 ^ s2 in
    eval_str_expr inp ctx sta (SConcat e1 e2) sta2 s3 bo3

  (** Evaluation of expressions to a list of strings:

      $(Bool, I, C, S) es \Downarrow (S, StringList)$
   *)
  with eval_list_expr input context state list_expression state (list string) =

    | eval_list_expr_nil: forall inp ctx sta.
      eval_list_expr inp ctx sta Nil sta Nil

    | eval_list_expr_cons: forall inp ctx sta sta1 sta2 se sp es s bo l2.
      eval_str_expr inp ctx sta se sta1 s bo ->
      let l1 = match sp with Split -> String.split_on_default_ifs s | DontSplit -> Cons s Nil end in
      eval_list_expr inp ctx sta1 es sta2 l2 ->
      let l3 = l1 ++ l2 in
      eval_list_expr inp ctx sta (Cons (se, sp) es) sta2 l3

  (* Evaluation of a program. It outputs in a boolean value *)
  inductive eval_program input context state program state context bool =
    | eval_program_instruction: forall inp ctx ctx' sta sta' pro bhv.
      eval_instruction inp ctx sta pro sta' ctx' bhv ->
      let b = bool_of_behaviour bhv in
      eval_program inp ctx sta pro sta' ctx' b
end